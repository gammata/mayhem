#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rflare, lflare, body, turret, feetparent, FLFoot, FRFoot, RLFoot,
       RRFoot, rightchunk, leftchunk, faceguard, Lgun, Rgun, Rbarrel, Lbarrel,
       hips, knobs;

static-var  bMoving, bAiming, Static_Var_3, restore_delay, gun_1;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MotionControl(justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		if( bMoving )
		{
			move FLFoot to z-axis [-0.36] speed [4.88];
			move FRFoot to z-axis [3.53] speed [15.2];
			move RLFoot to z-axis [-1.32] speed [7.9];
			move RRFoot to z-axis [-1.73] speed [4.3];
			turn rightchunk to x-axis <-11> speed <42>;
			if( !bAiming )
			{
				turn hips to y-axis <3.8> speed <64>;
			}	
			sleep 82;
		}
		if( bMoving )
		{
			move FLFoot to z-axis [1.48] speed [22.4];
			move FRFoot to z-axis [3.48] speed [0.6];
			move RLFoot to z-axis [-1.63] speed [3.6];
			move RRFoot to z-axis [-1.63] speed [1.2];
			turn FLFoot to x-axis <-12> speed <156>;
			turn FRFoot to x-axis <0> speed <188>;
			turn RRFoot to x-axis <9> speed <119>;
			turn rightchunk to x-axis <0> speed <132>;
			turn leftchunk to x-axis <-5> speed <69>;
			if( !bAiming )
			{
				turn hips to y-axis <2.28> speed <19>;
				turn body to x-axis <9.5> speed <116>;
			}
			sleep 83;
		}
		if( bMoving )
		{
			move FLFoot to z-axis [2.83] speed [16];
			move FRFoot to z-axis [2.52] speed [11];
			move RLFoot to z-axis [-2.08] speed [5.4];
			move RRFoot to z-axis [-1.58] speed [0.6];
			turn FLFoot to x-axis <-30> speed <210>;
			turn RRFoot to x-axis <15> speed <68>;
			turn rightchunk to x-axis <7> speed <100>;
			turn leftchunk to x-axis <-11> speed <68>;
			if( !bAiming )
			{
				turn hips to y-axis <-1.9> speed <50>;
				turn body to x-axis <14.4> speed <59.4>;
			}
			sleep 83;
		}
		if( bMoving )
		{
			move FRFoot to z-axis [2.33] speed [2.4];
			move RLFoot to z-axis [-2.48] speed [4.85];
			move RRFoot to z-axis [-0.58] speed [12.1];
			turn FLFoot to x-axis <-19> speed <138>;
			turn RRFoot to x-axis <19.7> speed <50.6>;
			turn rightchunk to x-axis <1.9> speed <73.6>;
			turn leftchunk to x-axis <-6> speed <41>;
			if( !bAiming )
			{
				turn hips to y-axis <-2.275> speed <4.6>;
				turn body to x-axis <2.275> speed <147>;
			}
			sleep 83;
		}
		if( bMoving )
		{
			move FRFoot to z-axis [1.72] speed [7.2];
			move RLFoot to z-axis [-3.23] speed [9.2];
			move RRFoot to z-axis [0.62] speed [14.4];
			turn FLFoot to x-axis <0.76> speed <219.6>;
			turn RRFoot to x-axis <7.6> speed <146.4>;
			turn leftchunk to x-axis <0> speed <82.3>;
			if( !bAiming )
			{
				turn hips to y-axis <-1.52> speed <9.1>;
				turn body to x-axis <0> speed <27.4>;
			}
			sleep 83;
		}
		if( bMoving )
		{
			move FLFoot to z-axis [1.98] speed [10.36];
			move FRFoot to z-axis [0.68] speed [12.8];
			move RRFoot to z-axis [0.27] speed [4.27];
			turn FLFoot to x-axis <0> speed <9.26>;
			turn RLFoot to x-axis <22.4> speed <273.2>;
			turn RRFoot to x-axis <0.76> speed <83.3>;
			turn leftchunk to x-axis <9.1> speed <111.1>;
			if( !bAiming )
			{
				turn hips to y-axis <0> speed <18.51>;
				turn body to x-axis <-2.274> speed <27.8>;
			}
			sleep 82;
		}
		if( bMoving )
		{
			move FLFoot to z-axis [1.53] speed [5.42];
			move FRFoot to z-axis [0.08] speed [7.23];
			move RLFoot to z-axis [-1.78] speed [17.5];
			move RRFoot to z-axis [-0.18] speed [5.42];
			turn RLFoot to x-axis <28.85> speed <77.7>;
			turn leftchunk to x-axis <10.25> speed <13.7>;
			if( !bAiming )
			{
				turn hips to y-axis <1.137> speed <13.72>;
				turn body to x-axis <-1.137> speed <13.72>;
			}
			sleep 83;
		}
		if( bMoving )
		{
			move FLFoot to z-axis [0.97] speed [6.7];
			move FRFoot to z-axis [-0.26] speed [4.24];
			move RLFoot to z-axis [-0.53] speed [15.5];
			move RRFoot to z-axis [-0.73] speed [6.67];
			turn RLFoot to x-axis <10> speed <225.5>;
			turn leftchunk to x-axis <2.65> speed <92>;
			if( !bAiming )
			{
				turn hips to y-axis <-1.52> speed <32.2>;
				turn body to x-axis <0> speed <13.8>;
			}
			sleep 83;
		}
		if( bMoving )
		{
			move FLFoot to z-axis [0.83] speed [1.8];
			move FRFoot to z-axis [0.3] speed [3.61];
			move RLFoot to z-axis [0.37] speed [10.84];
			move RRFoot to z-axis [-0.93] speed [2.4];
			turn FRFoot to x-axis <-10.25> speed <132.7>;
			turn RLFoot to x-axis <0> speed <128.1>;
			turn rightchunk to x-axis <-1.14> speed <36.6>;
			turn leftchunk to x-axis <-2.65> speed <64>;
			if( !bAiming )
			{
				turn hips to y-axis <-1.9> speed <4.57>;
			}
			sleep 83;
		}
		if( bMoving )
		{
			move FLFoot to z-axis [0.38] speed [5.45];
			move FRFoot to z-axis [1.23] speed [15.5];
			move RLFoot to z-axis [-0.43] speed [9.7];
			move RRFoot to z-axis [-1.38] speed [5.45];
			turn FRFoot to x-axis <-12> speed <27.6>;
			turn rightchunk to x-axis <-4> speed <36.8>;
			if( !bAiming )
			{
				turn hips to y-axis <-2.274> speed <4.55>;
			}
			sleep 83;
			justmoved = TRUE;
		}
		sleep 110;
		if( !bMoving )
		{
			if( justmoved )
			{
				justmoved = FALSE;
				turn rightchunk to x-axis <0> speed <150>;
				turn RRFoot to x-axis <0> speed <150>;
				turn FRFoot to x-axis <0> speed <150>;
				turn leftchunk to x-axis <0> speed <150>;
				turn RLFoot to x-axis <0> speed <150>;
				turn FLFoot to x-axis <0> speed <150>;
				if( !bAiming )
				{
					turn hips to y-axis <0> speed <64>;
					turn body to x-axis <0> speed <120>;
				}	
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	gun_1 = rflare;
	hide rflare;
	hide lflare;
	restore_delay = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = body;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0> speed <160>;
	turn Rgun to x-axis <0> speed <60>;
	turn Lgun to x-axis <0> speed <60>;
	bAiming = FALSE;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rflare;
	}
	if( gun_1 == 1 )
	{
		piecenum = lflare;
	}
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	if( !bAiming )
	{
		bAiming = TRUE;
		turn hips to y-axis <0> speed <64>;
		turn body to x-axis <0> speed <120>;
	}
	turn turret to y-axis heading speed <240>;
	turn Rgun to x-axis <0> - pitch speed <60>;
	turn Lgun to x-axis <0> - pitch speed <60>;
	wait-for-turn turret around y-axis;
	wait-for-turn Rgun around x-axis;
	wait-for-turn Lgun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show rflare;
		sleep 150;
		hide rflare;
		gun_1 = 1;
		return (0);
	}
	show lflare;
	sleep 150;
	hide lflare;
	gun_1 = 0;
	return (0);
}

Killed(severity, corpsetype)
{
	hide lflare;
	hide rflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP2;
		explode knobs type BITMAPONLY | BITMAP3;
		explode Lbarrel type BITMAPONLY | BITMAP4;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode lflare type BITMAPONLY | BITMAP1;
		explode Lgun type BITMAPONLY | BITMAP2;
		explode Rbarrel type BITMAPONLY | BITMAP3;
		explode rflare type BITMAPONLY | BITMAP4;
		explode Rgun type BITMAPONLY | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP2;
		explode RRFoot type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP2;
		explode knobs type FALL | BITMAP3;
		explode Lbarrel type FALL | BITMAP4;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode lflare type FALL | BITMAP1;
		explode Lgun type FALL | BITMAP2;
		explode Rbarrel type FALL | BITMAP3;
		explode rflare type FALL | BITMAP4;
		explode Rgun type FALL | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP2;
		explode RRFoot type BITMAPONLY | BITMAP3;
		explode turret type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP2;
		explode knobs type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode Lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode Rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP2;
		explode RRFoot type BITMAPONLY | BITMAP3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode FLFoot type BITMAPONLY | BITMAP1;
	explode FRFoot type BITMAPONLY | BITMAP2;
	explode knobs type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode Lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leftchunk type BITMAPONLY | BITMAP5;
	explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rightchunk type BITMAPONLY | BITMAP1;
	explode RLFoot type BITMAPONLY | BITMAP2;
	explode RRFoot type BITMAPONLY | BITMAP3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
