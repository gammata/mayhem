#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece body, turret, hatch, missile, L_F1, L_F2, L_M1, L_M2, 
      L_B1, L_B2, R_F1, R_F2, R_M1, R_M2, R_B1, R_B2,
      base;

static-var  Moving_1, Ready_2, busy_3, reload_6;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MotionControl(justmoved)
{
	while( TRUE )
	{
		if( Moving_1 )
		{
			justmoved = 1;
			TURN R_B1 to y-axis <-30> speed <180>;
			TURN L_F1 to y-axis <-30> speed <360>;
			TURN L_F2 to z-axis <-30> speed <250>;
			TURN R_M2 to z-axis <0> speed <500>;
			sleep 60;
		}
		if( Moving_1 )
		{
			TURN R_M1 to y-axis <-15> speed <180>;
			TURN L_B1 to y-axis <0> speed <360>;
			TURN L_B2 to z-axis <30> speed <250>;
			TURN R_F2 to z-axis <0> speed <500>;
			sleep 60;
		}
		if( Moving_1 )
		{
			TURN R_F1 to y-axis <0> speed <180>;
			TURN L_M1 to y-axis <-15> speed <360>;
			TURN L_M2 to z-axis <30> speed <250>;
			TURN L_F2 to z-axis <0> speed <500>;
			sleep 60;
		}
		if( Moving_1 )
		{
			TURN R_B1 to y-axis <0> speed <360>;
			TURN L_F1 to y-axis <0> speed <180>;
			TURN R_B2 to z-axis <-30> speed <250>;
			TURN L_B2 to z-axis <0> speed <500>;
			sleep 60;
		}
		if( Moving_1 )
		{
			TURN R_M1 to y-axis <15> speed <360>;
			TURN L_B1 to y-axis <30> speed <180>;
			TURN R_M2 to z-axis <-30> speed <250>;
			TURN L_M2 to z-axis <0> speed <500>;
			sleep 60;
		}
		if( Moving_1 )
		{
			TURN R_F1 to y-axis <30> speed <360>;
			TURN L_M1 to y-axis <15> speed <180>;
			TURN R_F2 to z-axis <-30> speed <250>;
			TURN R_B2 to z-axis <0> speed <500>;
			sleep 60;
		}
		if( !Moving_1 )
		{
			if( justmoved )
			{
				justmoved = 0;
				turn R_B1 to y-axis <-15> speed <180>;
				turn R_M1 to y-axis <0> speed <90>;
				turn R_F1 to y-axis <15> speed <180>;
				turn L_F1 to y-axis <-15> speed <180>;
				turn L_M1 to y-axis <0> speed <90>;
				turn L_B1 to y-axis <15> speed <180>;
				TURN R_B2 to z-axis <0> speed <250>;
				TURN R_M2 to z-axis <0> speed <250>;
				TURN R_F2 to z-axis <0> speed <250>;
				TURN L_B2 to z-axis <0> speed <250>;
				TURN L_M2 to z-axis <0> speed <250>;
				TURN L_F2 to z-axis <0> speed <250>;
			}
			sleep 150;
		}
	}
}

Create()
{
	turn R_B1 to y-axis <-15> NOW;
	turn R_F1 to y-axis <15> NOW;
	turn L_F1 to y-axis <-15> NOW;
	turn L_B1 to y-axis <15> NOW;
	turn hatch to z-axis <180> NOW;	
	Moving_1 = 0;
	Ready_2 = 0;
	Busy_3 = 0;
	reload_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	start-script MotionControl();
}

SweetSpot (piecenum)
{
	piecenum = base;
}

StartMoving()
{
	Moving_1 = 1;
	return(0);
}

StopMoving()
{
	Moving_1 = 0;
	return(0);
}

Closehatch()
{
	set-signal-mask 2;
	while ( busy_3 )
	{
		sleep 250;
	}
	set-signal-mask 0;
	busy_3 = 1;
	ready_2 = 0;
	turn turret to y-axis 0 speed <200>;
	move missile to y-axis [0] speed [4];
	wait-for-turn turret around y-axis;
	move hatch to y-axis [0.8] speed [4];
	sleep 200;
	turn hatch to z-axis <120> speed <400>;
	sleep 300;
	turn hatch to z-axis <180> speed <300>;
	sleep 100;
	move hatch to y-axis [0] speed [8];
	sleep 100;
	busy_3 = 0;
}

RestoreAfterDelay()
{
	sleep 4000;
	start-script Closehatch();
}

AimPrimary(heading, pitch)
{
	while( busy_3 or reload_6 )
	{
		sleep 250;
	}
	if( !ready_2 )
	{
		busy_3 = 1;
		show missile;
		move hatch to y-axis [0.8] speed [4];
		sleep 200;
		turn hatch to z-axis <60> speed <400>;
		sleep 300;
		turn hatch to z-axis <0> speed <300>;
		sleep 100;
		move hatch to y-axis [0] speed [8];
		move missile to y-axis [0.4] speed [4];
		sleep 100;
		ready_2 = 1;
		busy_3 = 0;
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <200>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	Return(1);
}

FirePrimary()
{
	reload_6 = 1;
	hide missile;
	sleep 500;
	start-script Closehatch();
	sleep 1000;
	reload_6 = 0;
	return(0);
}

QueryPrimary(piecenum)
{
	piecenum = missile;
}

Killed(severity, corpsetype)
	{
	hide missile;
	if (severity <= 25)
	{
		corpsetype = 1;
		explode body type	BITMAPONLY | BITMAP2;
		explode hatch type	BITMAPONLY | BITMAP1;
		explode L_F1 type	BITMAPONLY | BITMAP4;
		explode L_F2 type	BITMAPONLY | BITMAP3;
		explode L_M1 type	FALL | BITMAP1;
		explode L_M2 type	FALL | BITMAP1;
		explode L_B1 type	BITMAPONLY | BITMAP4;
		explode L_B2 type	BITMAPONLY | BITMAP3;
		explode R_F1 type	BITMAPONLY | BITMAP4;
		explode R_F2 type	BITMAPONLY | BITMAP3;
		explode R_M1 type	BITMAPONLY | BITMAP4;
		explode R_M2 type	BITMAPONLY | BITMAP3;
		explode R_B1 type	BITMAPONLY | BITMAP3;
		explode R_B2 type	FALL | BITMAP1;
		return(0);
	}
	if (severity <= 50)
	{
		corpsetype = 2;
		explode body type	BITMAPONLY | BITMAP4;
		explode hatch type	FALL | BITMAP4;
		explode L_F1 type	FALL | BITMAP3;
		explode L_F2 type	FALL | BITMAP4;
		explode L_M1 type	FALL | BITMAP3;
		explode L_M2 type	FALL | BITMAP4;
		explode L_B1 type	FALL | BITMAP3;
		explode L_B2 type	FALL | BITMAP4;
		explode R_F1 type	FALL | BITMAP3;
		explode R_F2 type	FALL | BITMAP4;
		explode R_M1 type	FALL | BITMAP3;
		explode R_M2 type	FALL | BITMAP4;
		explode R_B1 type	FALL | BITMAP3;
		explode R_B2 type	FALL | BITMAP4;
		return(0);
	}
	if (severity <= 99)
	{
		corpsetype = 3;
		explode base type	BITMAPONLY | BITMAP4;
		explode hatch type	BITMAPONLY | BITMAP2;
		explode L_F1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode L_F2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode L_M1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode L_M2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode L_B1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode L_B2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode R_F1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode R_F2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode R_M1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode R_M2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode R_B1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode R_B2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return(0);
	}
	explode base type	BITMAPONLY | BITMAP2;
	explode hatch type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode L_F1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode L_F2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode L_M1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode L_M2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode L_B1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode L_B2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode R_F1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode R_F2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode R_M1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode R_M2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode R_B1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode R_B2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return(0);
	}
