#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, block1, block2, chunk3, chunk4, chunk1, chunk2, 
       nano2, nano1;

static-var  Nano_1, ReqState_3, On_4, Busy_5;


#ifndef UNIT_CLOAKED
#define UNIT_CLOAKED 111
#endif

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			Func_Var_4 = Rand(1,4);
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from chunk1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from chunk2;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from chunk3;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from chunk4;
			}
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ReqState_3 != On_4 )
	{
		Busy_5 = 1;
		if( ReqState_3  )
		{
			if( get UNIT_CLOAKED )
			{
				set UNIT_CLOAKED to 0;
			}
			dont-cache block1;
			dont-cache block2;
			dont-cache chunk1;
			dont-cache chunk2;
			dont-cache chunk3;
			dont-cache chunk4;
			move block1 to x-axis [4] speed [5];
			move block2 to x-axis [-4] speed [5];
			move chunk3 to z-axis [0.87] speed [3.48];
			move chunk4 to z-axis [-0.87] speed [3.48];
			move chunk1 to z-axis [-0.87] speed [3.48];
			move chunk2 to z-axis [0.87] speed [3.48];
			sleep 250;
			move chunk1 to x-axis [4] speed [5];
			move chunk2 to x-axis [4] speed [5];
			move chunk3 to x-axis [-4] speed [5];
			move chunk4 to x-axis [-4] speed [5];
			sleep 750;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			move chunk1 to x-axis [0] speed [5];
			move chunk2 to x-axis [0] speed [5];
			move chunk3 to x-axis [0] speed [5];
			move chunk4 to x-axis [0] speed [5];
			move block1 to x-axis [0] speed [5];
			move block2 to x-axis [0] speed [5];
			sleep 900;
			move chunk3 to z-axis [0] speed [3];
			move chunk4 to z-axis [0] speed [3];
			move chunk1 to z-axis [0] speed [3];
			move chunk2 to z-axis [0] speed [3];
			sleep 250;
			cache block1;
			cache block2;
			cache chunk1;
			cache chunk2;
			cache chunk3;
			cache chunk4;
			if( !get UNIT_CLOAKED )
			{
				set UNIT_CLOAKED to 1;
			}
		}
		Busy_5 = 0;
	}
	return (0);
}

Create()
{
	dont-shade block1;
	dont-shade block2;
	dont-shade base;
	dont-shade chunk1;
	dont-shade chunk2;
	dont-shade chunk3;
	dont-shade chunk4;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	if( !ReqState_3 AND !busy_5 )
	{
		set UNIT_CLOAKED to 1;
	}
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = nano1;
	}
	if( Nano_1 )
	{
		piecenum = nano2;
	}
	Nano_1 = ( !Nano_1 );
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 8000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	explode base type BITMAPONLY | BITMAP3;
	return (0);
}