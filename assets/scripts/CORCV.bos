#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, door1, door2, stand, gun, turret;

static-var  Nano_1, ReqState_2, Busy_3, On_4, Moving_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState(sleeptime)
{
	while( !Busy_3 AND ( ReqState_2 != On_4 ) )
	{
		Busy_3 = 1;
		if( ReqState_2 )
		{
			turn door1 to z-axis <-95> speed <190.79>;
			turn door2 to z-axis <95> speed <190.79>;
			sleep 498;
			turn door1 to z-axis <-192> speed <196>;
			turn door2 to z-axis <192> speed <196>;
//			sleep 498;
			move stand to y-axis [3.05] speed [5.25];
			move gun to y-axis [0.70] speed [1.20];
			turn turret to y-axis Nano_1 speed <160>;
			sleep 500;
			wait-for-turn turret around y-axis;
			sleeptime = Rand(1,500);
			sleep sleeptime;
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_2 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			turn turret to y-axis <0> speed <160>;
			wait-for-turn turret around y-axis;
			move stand to y-axis [3.05] now;
			move stand to y-axis [0] speed [5.22];
			move gun to y-axis [0.70] now;
			move gun to y-axis [0] speed [1.20];
//			sleep 584;
			turn door1 to z-axis <-95> speed <166>;
			turn door2 to z-axis <95> speed <166>;
			sleep 584;
			turn door1 to z-axis <0> speed <226>;
			turn door2 to z-axis <0> speed <226>;
			sleep 420;
		}
		Busy_3 = 0;
	}
	return (0);
}

Create()
{
	Nano_1 = 0;
	ReqState_2 = 0;
	Busy_3 = 0;
	On_4 = 0;
	Moving_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	Moving_5 = 1;
}

StopMoving()
{
	Moving_5 = 0;
}

StartBuilding(Func_Var_1)
{
	Nano_1 = Func_Var_1;
	ReqState_2 = 1;
	start-script RequestState();
	return (0);
}

StopBuilding()
{
	ReqState_2 = 0;
	sleep 4000;
	if( !ReqState_2 )
	{
		start-script RequestState();
	}
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

TargetHeading(Func_Var_1)
{
	Nano_1 = ( 0 - Func_Var_1 );
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode gun type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode stand type FALL | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode turret type FALL | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type BITMAPONLY | BITMAP3;
	explode door2 type BITMAPONLY | BITMAP4;
	explode stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}