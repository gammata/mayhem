#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare, back, barrel, barrel2, glow, sleeve, light, stand, turret, 
       spinner1, spinner2, spinner3, spinner4, spinner5, spinner6, spinner7, spinner8,
       body, baseglow, dummy, base;       

static-var start;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	spin flare around z-axis speed <700>;
	dont-cache flare;
	hide glow;
	hide baseglow;
	hide light;
	hide glow;
	hide barrel;
	hide barrel2;
	hide back;
	hide sleeve;
	hide stand;
	hide spinner1;
	dont-shade dummy;
	var buildangle;
	buildangle = Rand(0,65535);
	turn dummy to y-axis buildangle NOW;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	sleep 100;
	turn turret to y-axis buildangle NOW;
	hide dummy;
	show glow;
	show baseglow;
	show light;
	show glow;
	show barrel;
	show barrel2;
	show back;
	show sleeve;
	show stand;
	show spinner1;
	dont-cache glow;
	dont-cache baseglow;
	dont-cache light;
	dont-shade glow;
	dont-shade barrel;
	dont-shade barrel2;
	dont-shade back;
	dont-shade sleeve;
	dont-shade stand;
	dont-shade spinner1;
	sleep 100;
	start = 1;
	start-script SmokeUnit();
}

//TargetCleared(which)
//{
//	stop-spin turret around y-axis;
//	stop-spin sleeve around x-axis;
//}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	while( !start )
	{
		sleep 200;
	}
	turn turret to y-axis heading speed <5>;
	turn sleeve to x-axis <0.00> - pitch speed <2>;
	turn spinner1 to y-axis heading speed <5>;
	turn spinner2 to y-axis heading speed <5>;
	turn spinner3 to y-axis heading speed <5>;
	turn spinner4 to y-axis heading speed <5>;
	turn spinner5 to y-axis heading speed <5>;
	turn spinner6 to y-axis heading speed <5>;
	turn spinner7 to y-axis heading speed <5>;
	turn spinner8 to y-axis heading speed <5>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

FirePrimary()
{
	cache glow;
	show flare;
	move barrel2 to z-axis [-10] speed [500];
	wait-for-move barrel2 along z-axis;
	move barrel to z-axis [-10] speed [300];
	move back to z-axis [4] speed [200];
	wait-for-move barrel along z-axis;
	move sleeve to z-axis [-2] speed [100];
	sleep 100;
	hide flare;
	move sleeve to z-axis [0] speed [2.5];
	sleep 600;
	move barrel to z-axis [0] speed [5];
	sleep 1200;
	move barrel2 to z-axis [0] speed [4];
	move back to z-axis [0] speed [5];
	sleep 20000;
	dont-cache glow;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = barrel;
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP4;
		explode sleeve type BITMAPONLY | BITMAP5;
		explode light type SHATTER | BITMAP5;
		explode glow type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | BITMAP2;
		explode barrel type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP4;
		explode sleeve type BITMAPONLY | BITMAP5;
		explode light type BITMAPONLY | BITMAP5;
		explode glow type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel type BITMAPONLY | BITMAP3;
		explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode sleeve type BITMAPONLY | BITMAP5;
		explode light type BITMAPONLY | BITMAP5;
		explode glow type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel type BITMAPONLY | BITMAP3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode sleeve type BITMAPONLY | BITMAP5;
	explode light type BITMAPONLY | BITMAP5;
	explode glow type SHATTER | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
