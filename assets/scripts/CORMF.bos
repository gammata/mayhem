#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, barrel1, barrel2, sleeve1, sleeve2, gun, turret,
       flarea, guna, turreta, flareb, gunb, turretb, ff1, ff2, 
       fb1, fb2, ftur, fgun, rff, rfb, rmf, rmb, 
       rbf, rbb, lff, lfb, lmf, lmb ,lbf, lbb, 
       rf, rm, rb, lf, lm, lb, rftrack, rmtrack, 
       rbtrack, lftrack, lmtrack, lbtrack, dish, radar, fbase, rocker,   
       chassis, base;

static-var  gun_1, gun_2, gun_3, restore_4, reset_5, wait_1, bMoving;

RestoreAfterDelay()
{
	sleep 16000;
	if( !restore_4 )
	{
		signal 2;
		signal 4;
		signal 16;
		turn turret to y-axis <0> speed <40>;
		turn gun to x-axis <0> speed <12>;
		turn turreta to y-axis <0> speed <120>;
		turn turretb to y-axis <0> speed <120>;
		turn guna to z-axis <0> speed <120>;
		turn gunb to z-axis <0> speed <120>;
		turn ftur to y-axis <0> speed <150>;
		turn fgun to x-axis <0> speed <120>;
	}
	reset_5 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( restore_4 AND ( !reset_5 ) )
		{
			restore_4 = FALSE;
			reset_5 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

MoveControl()
{
	var dir, justmoved, rfront, rmid, rback, lfront, lmid, lback;
	dir = get XZ_ATAN(0);
	lfront = get XZ_HYPOT(get PIECE_XZ(lff) - get PIECE_XZ(lfb));
	lmid = get XZ_HYPOT(get PIECE_XZ(lmf) - get PIECE_XZ(lmb));
	lback = get XZ_HYPOT(get PIECE_XZ(lbf) - get PIECE_XZ(lbb));
	rfront = get XZ_HYPOT(get PIECE_XZ(rff) - get PIECE_XZ(rfb));
	rmid = get XZ_HYPOT(get PIECE_XZ(rmf) - get PIECE_XZ(rmb));
	rback = get XZ_HYPOT(get PIECE_XZ(rbf) - get PIECE_XZ(rbb));
	justmoved = 0;
	while( TRUE )
	{
		if( bMoving )
		{
			justmoved = 1;
			dir = dir - get XZ_ATAN(0);
			turn lbtrack to x-axis (get ATAN((get PIECE_Y(lbf) - get GROUND_HEIGHT(get PIECE_XZ(lbf))) - (get PIECE_Y(lbb) - get GROUND_HEIGHT(get PIECE_XZ(lbb))),lback)) speed <300>;
			turn lmtrack to x-axis (get ATAN((get PIECE_Y(lmf) - get GROUND_HEIGHT(get PIECE_XZ(lmf))) - (get PIECE_Y(lmb) - get GROUND_HEIGHT(get PIECE_XZ(lmb))),lmid)) speed <300>;
			turn lftrack to x-axis (get ATAN((get PIECE_Y(lff) - get GROUND_HEIGHT(get PIECE_XZ(lff))) - (get PIECE_Y(lfb) - get GROUND_HEIGHT(get PIECE_XZ(lfb))),lfront)) speed <300>;
			turn rbtrack to x-axis (get ATAN((get PIECE_Y(rbf) - get GROUND_HEIGHT(get PIECE_XZ(rbf))) - (get PIECE_Y(rbb) - get GROUND_HEIGHT(get PIECE_XZ(rbb))),rback)) speed <300>;	
			turn rmtrack to x-axis (get ATAN((get PIECE_Y(rmf) - get GROUND_HEIGHT(get PIECE_XZ(rmf))) - (get PIECE_Y(rmb) - get GROUND_HEIGHT(get PIECE_XZ(rmb))),rmid)) speed <300>;
			turn rftrack to x-axis (get ATAN((get PIECE_Y(rff) - get GROUND_HEIGHT(get PIECE_XZ(rff))) - (get PIECE_Y(rfb) - get GROUND_HEIGHT(get PIECE_XZ(rfb))),rfront)) speed <300>;
			if( bMoving == 1 )
			{
				if(( dir > <2> ) OR ( dir < <-2> ))
				{
					turn lf to y-axis <-18> speed <18>;
					turn rf to y-axis <18> speed <18>;
					turn lb to y-axis <18> speed <18>;
					turn rb to y-axis <-18> speed <18>;
				}
			}
			if( bMoving == 2)
			{
				turn lf to y-axis ( 6 * dir ) speed <18>;
				turn lb to y-axis 0 - ( 6 * dir ) speed <18>;
				turn rf to y-axis ( 6 * dir ) speed <18>;
				turn rb to y-axis 0 - ( 6 * dir ) speed <18>;
			}
			if(	bMoving == 3)
			{
				turn lf to y-axis ( 3 * dir ) speed <18>;
				turn lb to y-axis 0 - ( 3 * dir ) speed <18>;
				turn rf to y-axis ( 3 * dir ) speed <18>;
				turn rb to y-axis 0 - ( 3 * dir ) speed <18>;
			}
			dir = get XZ_ATAN(0);
		}
		if( !bMoving )
		{		
			if( justmoved )
			{
				justmoved = 0;
				turn lf to y-axis <0> speed <18>;
				turn lb to y-axis <0> speed <18>;
				turn rf to y-axis <0> speed <18>;
				turn rb to y-axis <0> speed <18>;
			}
		}
		sleep 160;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flarea;
	hide flareb;
	hide ff1;
	hide ff2;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache flarea;
	dont-cache flareb;
	dont-cache ff1;
	dont-cache ff2;
	spin flare1 around z-axis speed <600>;
	spin flare2 around z-axis speed <600>;
	wait_1 = 0;
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	restore_4 = 0;
	reset_5 = 0;
	bMoving = 0;
	set ARMORED to TRUE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	start-script MoveControl();
}

Activate()
{
	spin radar around y-axis speed <30>;
	spin dish around x-axis speed <160>;
}

Deactivate()
{
	spin radar around y-axis speed <0>;
	spin dish around x-axis speed <0>;
	turn radar to y-axis <0> speed <30>;
	turn dish to x-axis <0> speed <160>;
}

StartMoving()
{
	bMoving = 1;
}

StopMoving()
{
	bMoving = 0;
}
	
MoveRate1()
{
	bMoving=1;
}
	
MoveRate2()
{
	bMoving=2;
}
	
MoveRate3()
{
	bMoving=3;
}

AimTertiary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <50>;
	turn gun to x-axis <0> - pitch speed <32>;
	while( wait_1 )
	{
		wait-for-move gun along z-axis;
		wait-for-move barrel2 along z-axis;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	restore_4 = 1;
	return (1);
}

AimPrimary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn turreta to y-axis heading speed <300>;
	turn turretb to y-axis heading speed <300>;	
	wait-for-turn gunb around z-axis;
	wait-for-turn turretb around y-axis;
	wait-for-turn turreta around y-axis;
	restore_4 = 1;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 16;
	set-signal-mask 0;
	set-signal-mask 16;
	turn ftur to y-axis heading speed <750>;
	turn fgun to x-axis ( <0> - pitch ) speed <600>;
	wait-for-turn ftur around y-axis;
	wait-for-turn fgun around x-axis;
	restore_4 = 1;
	return(1);
}

FireTertiary()
{
	wait_1 = 1;
	move gun to z-axis [-0.4] speed [100];
	if( !gun_1 )
	{ 
		show flare1;
		emit-sfx 256 | 1 from flare1;
		emit-sfx 256 | 1 from flare1;
		emit-sfx 256 | 1 from flare1;
		emit-sfx 256 | 1 from flare1;
		move barrel1 to z-axis [-4.5] speed [500];
		move barrel1 to y-axis [-0.1] speed [500];
		move sleeve1 to z-axis [-1] speed [200];
		sleep 125;
		hide flare1;
		move barrel1 to z-axis [0] speed [2.4];
		sleep 250;
		move barrel1 to y-axis [0] speed [0.1];
		move sleeve1 to z-axis [0] speed [1];
	}
	if( gun_1 )
	{
		show flare2;
		emit-sfx 256 | 1 from flare2;
		emit-sfx 256 | 1 from flare2;
		emit-sfx 256 | 1 from flare2;
		emit-sfx 256 | 1 from flare2;
		move barrel2 to z-axis [-4.5] speed [500];
		move barrel2 to y-axis [-0.1] speed [500];
		move sleeve2 to z-axis [-1] speed [200];
		sleep 125;
		hide flare2;
		move barrel2 to z-axis [0] speed [2.4];
		sleep 250;
		move barrel2 to y-axis [0] speed [0.1];
		move sleeve2 to z-axis [0] speed [1];
	}
	gun_1 = !gun_1;
	move gun to z-axis 0 speed [1];
	wait-for-move gun along z-axis;
	wait-for-move barrel2 along z-axis;
	wait_1 = 0;
	return (0);
}

FirePrimary()
{
	if( !gun_2 )
	{
		gun_2 = 1;
		turn guna to z-axis <0> now;
		show flarea;
		sleep 150;
		hide flarea;
		sleep 100;
		turn guna to z-axis <120> speed <480>;
		return (0);
	}
	if( gun_2 )
	{
		gun_2 = 0;
		turn gunb to z-axis <0> now;
		show flareb;
		sleep 150;
		hide flareb;
		sleep 100;
		turn gunb to z-axis <120> speed <480>;
		return (0);
	}
}

FireSecondary()
{
	if( !gun_3 )
	{
		move fb1 to z-axis [-2.5] now;
		show ff1;
		sleep 150;
		hide ff1;
		move fb1 to z-axis [0] speed [8];
	}
	if( gun_3 )
	{
		move fb2 to z-axis [-2.5] now;
		show ff2;
		sleep 150;
		hide ff2;
		move fb2 to z-axis [0] speed [8];
	}
	gun_3 = !gun_3;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = flarea;
	}
	if( gun_2 )
	{
		piecenum = flareb;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = turreta;
	}
	if( gun_2 )
	{
		piecenum = turretb;
	}
	return (0);
}

QuerySecondary(piecenum)
{
	if( !gun_3 )
	{
		piecenum = ff1;
		return(0);
	}
	if( gun_3 )
	{
		piecenum = ff2;
		return(0);
	}
}

AimFromSecondary(piecenum)
{
	piecenum = fgun;
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flarea;
	hide flareb;
	hide ff1;
	hide ff2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode sleeve1 type BITMAPONLY | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP4;
		explode sleeve2 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP4;
		explode guna type BITMAPONLY | BITMAP4;
		explode gunb type BITMAPONLY | BITMAP5;
		explode turreta type BITMAPONLY | BITMAP1;
		explode turretb type BITMAPONLY | BITMAP2;
		explode ftur type BITMAPONLY | BITMAP2;
		explode fgun type BITMAPONLY | BITMAP3;
		explode fb1 type FALL | BITMAP1;
		explode fb2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode sleeve1 type FALL | BITMAP3;
		explode barrel1 type FALL | BITMAP4;
		explode sleeve2 type FALL | BITMAP3;
		explode barrel2 type FALL | BITMAP4;
		explode guna type FALL | BITMAP4;
		explode gunb type SHATTER | BITMAP5;
		explode turreta type BITMAPONLY | BITMAP1;
		explode turretb type BITMAPONLY | BITMAP2;
		explode ftur type FALL | BITMAP2;
		explode fgun type BITMAPONLY | BITMAP3;
		explode fb1 type FALL | BITMAP1;
		explode fb2 type FALL | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gunb type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode turreta type BITMAPONLY | BITMAP1;
		explode turretb type BITMAPONLY | BITMAP2;
		explode ftur type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode fgun type BITMAPONLY | BITMAP3;
		explode fb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode fb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gunb type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode turreta type BITMAPONLY | BITMAP1;
	explode turretb type BITMAPONLY | BITMAP2;
	explode ftur type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode fgun type BITMAPONLY | BITMAP3;
	explode fb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode fb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
