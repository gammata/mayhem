#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, slip, beam1, beam2, piling1, piling2, explode1, explode2,
       nano2, nano1, pt;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ReqState_3 != On_4 )
	{
		Busy_5 = 1;
		if( ReqState_3 and !On_4 )
		{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache piling1;
	dont-cache piling2;
	dont-cache slip;
		move nano2 to y-axis [0] now;
		move nano2 to y-axis [7.80] speed [15.18];
		move nano1 to y-axis [0] now;
		move nano1 to y-axis [7.65] speed [14.88];
		sleep 514;
		turn nano2 to x-axis <58.06> speed <112.09>;
		turn nano1 to x-axis <58.06> speed <112.09>;
//		sleep 518;
		turn piling1 to y-axis <-52.66> speed <101.47>;
		turn piling2 to y-axis <47.71> speed <91.93>;
		sleep 545;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 and On_4 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
		move nano2 to y-axis [7.80] now;
		move nano1 to y-axis [7.65] now;
		turn piling1 to y-axis <-52.66> now;
		turn piling1 to y-axis <0> speed <102.46>;
		turn piling2 to y-axis <47.71> now;
		turn piling2 to y-axis <0> speed <92.82>;
		turn nano2 to x-axis <58.06> now;
		turn nano1 to x-axis <58.06> now;
//		sleep 514;
		turn nano2 to x-axis <0> speed <112.09>;
		turn nano1 to x-axis <0> speed <112.09>;
		sleep 518;
		move nano2 to y-axis [0] speed [15];
		move nano1 to y-axis [0] speed [14.74];
		sleep 545;
	cache beam1;
	cache beam2;
	cache nano1;
	cache nano2;
	cache piling1;
	cache piling2;
	cache slip;
		}
		Busy_5 = 0;
	}
	return (0);
}

Create()
{
	dont-shade beam1;
	dont-shade beam2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade piling1;
	dont-shade piling2;
	dont-shade slip;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 )
	{
		piecenum = beam2;
	}
	Nano_1 = ( !Nano_1 );
	return (0);
}

Activate()
{
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 10000;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = slip;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = piling1;
	return (0);
}

AimFromTertiary(PieceNum)
{
	PieceNum = slip;
}

QueryTertiary(PieceNum)
{
	PieceNum = pt;
}
	
AimTertiary(Heading, Pitch)
{
	signal 4;
	set-signal-mask 4;
	if( Heading > <45> AND Heading <= <135> )
	{
		turn slip to y-axis <90> speed <60>;
		Return(1);
	}
	if( Heading > <135> AND Heading <= <225> )
	{
		turn slip to y-axis <180> speed <60>;
		Return(1);
	}
	if( Heading > <225> AND Heading <= <315> )
	{
		turn slip to y-axis <270> speed <60>;
		Return(1);
	}
	turn slip to y-axis 0 speed <60>;
	Return(1);
}

Killed(severity, corpsetype)
{
	explode base type BITMAPONLY | BITMAP1;
	explode slip type BITMAPONLY | BITMAP2;
	explode beam1 type BITMAPONLY | BITMAP3;
	explode beam2 type BITMAPONLY | BITMAP4;
	explode piling1 type BITMAPONLY | BITMAP5;
	explode piling2 type BITMAPONLY | BITMAP1;
	explode explode1 type BITMAPONLY | BITMAP2;
	explode explode2 type BITMAPONLY | BITMAP3;
	explode nano2 type BITMAPONLY | BITMAP4;
	explode nano1 type BITMAPONLY | BITMAP5;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	corpsetype = 3;
	return (0);
}