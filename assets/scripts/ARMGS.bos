#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  f1, f2, m1, m2, barrel1, barrel2, turret, launcher, 
       mturret, wake1, wake2, base;

static-var  gun_1, gun_2, reset_2, timer_3, reload_4;

RestoreAfterDelay()
{
	sleep 5000;
	if( !reset_2 )
	{
		signal 2;
		signal 4;
		set-signal-mask 0;
		turn turret to y-axis <0> speed <80>;
		turn turret to x-axis <0> speed <30>;
		turn mturret to y-axis <0> speed <100>;
		turn launcher to x-axis <0> speed <100>;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		if( reset_2 AND timer_3 >= 0 )
		{
			timer_3 = timer_3 - sleeptime;
		}
		sleep sleeptime;
		if( reset_2 AND timer_3 < 0 )
		{
			timer_3 = 0;
			reset_2 = 0;
			start-script RestoreAfterDelay();
		}
	}
}

Create()
{
	hide f1;
	hide f2;
	dont-cache f1;
	dont-cache f2;
	gun_1 = 0;
	gun_2 = 0;
	reset_2 = 0;
	timer_3 = 0;
	reload_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal 8;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <150>;
	turn turret to x-axis <0> - pitch speed <40>;
	while( reload_4 )
	{
		wait-for-move barrel1 along z-axis;
		wait-for-move barrel2 along z-axis;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	reset_2 = 1;
	timer_3 = 8000;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 0;
	set-signal-mask 4;
	turn mturret to y-axis heading speed <360>;
	turn launcher to x-axis <0> - pitch speed <200>;
	wait-for-move m1 along z-axis;
	wait-for-move m2 along z-axis;
	wait-for-turn mturret around y-axis;
	wait-for-turn launcher around x-axis;
	reset_2 = 1;
	timer_3 = 8000;
	return (1);
}

FirePrimary()
{
	reload_4 = 1;
	if( !gun_1 )
	{
		move barrel1 to z-axis [-1.6] speed [500];
		show f1;
		sleep 120;
		hide f1;
		move barrel1 to z-axis [0] speed [1.25];
		wait-for-move barrel1 along z-axis;
	}
	if( gun_1 )
	{
		move barrel2 to z-axis [-1.6] speed [500];
		show f2;
		sleep 120;
		hide f2;
		move barrel2 to z-axis [0] speed [1.25];
		wait-for-move barrel1 along z-axis;
	}
	gun_1 = !gun_1;
	reload_4 = 0;
}

FireTertiary()
{
	gun_2 = !gun_2;
	move m1 to z-axis [0.4] now;
	move m2 to z-axis [0.4] now;
	move m1 to z-axis [0] speed [0.2];
	move m2 to z-axis [0] speed [0.2];
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromTertiary(piecenum)
{
	piecenum = mturret;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

QueryTertiary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = m1;
	}
	if( gun_2 )
	{
		piecenum = m2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide f1;
	hide f2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode launcher type BITMAPONLY | BITMAP1;
		explode barrel1 type BITMAPONLY | BITMAP2;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode m1 type BITMAPONLY | BITMAP4;
		explode m2 type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		explode mturret type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP2;
		explode wake2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode launcher type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode m1 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode m2 type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode turret type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode mturret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode m1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode m2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode mturret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
