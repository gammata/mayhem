#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, b1, b2, b3, b4, nano1, nano2,
       nano3, nano4, arm1, arm2, arm3, arm4, door1, door2,
       door3, door4, slider1, slider2, slider3, slider4, slider5, slidel1,
       slidel2, slidel3, slidel4, slidel5, fxr1a, fxr1b, fxr1c,
       fxr2a, fxr2b, fxr2c, fxr3a, fxr3b, fxr3c, fxr4a, fxr4b,
       fxr4c, fxr5a, fxr5b, fxr5c, fxl1a, fxl1b, fxl1c, fxl2a, 
       fxl2b, fxl2c, fxl3a, fxl3b, fxl3c, fxl4a, fxl4b, fxl4c,
       fxl5a, fxl5b, fxl5c;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ReqState_3 != On_4 )
	{
		Busy_5 = 1;
		if( ReqState_3 and !On_4 )
		{
			move slider1 to x-axis [-10] speed [25];
			emit-sfx 256 | 3 from fxr1a;
			emit-sfx 256 | 3 from fxr1b;
			emit-sfx 256 | 3 from fxr1c;
			sleep 200;
			move slidel1 to x-axis [10] speed [25];
			emit-sfx 256 | 3 from fxl1a;
			emit-sfx 256 | 3 from fxl1b;
			emit-sfx 256 | 3 from fxl1c;
			sleep 200;
			move slider2 to x-axis [-10] speed [25];
			emit-sfx 256 | 3 from fxr2a;
			emit-sfx 256 | 3 from fxr2b;
			emit-sfx 256 | 3 from fxr2c;
			sleep 200;
			move slidel2 to x-axis [10] speed [25];
			emit-sfx 256 | 3 from fxl2a;
			emit-sfx 256 | 3 from fxl2b;
			emit-sfx 256 | 3 from fxl2c;
			sleep 200;
			move slider3 to x-axis [-10] speed [25];
			emit-sfx 256 | 3 from fxr3a;
			emit-sfx 256 | 3 from fxr3b;
			emit-sfx 256 | 3 from fxr3c;
			sleep 200;
			move slidel3 to x-axis [10] speed [25];
			emit-sfx 256 | 3 from fxl3a;
			emit-sfx 256 | 3 from fxl3b;
			emit-sfx 256 | 3 from fxl3c;
			sleep 200;
			move slider4 to x-axis [-10] speed [25];
			emit-sfx 256 | 3 from fxr4a;
			emit-sfx 256 | 3 from fxr4b;
			emit-sfx 256 | 3 from fxr4c;
			sleep 200;
			move slidel4 to x-axis [10] speed [25];
			move door1 to y-axis [-5] speed [20];
			move door3 to y-axis [-5] speed [20];
			emit-sfx 256 | 3 from fxl4a;
			emit-sfx 256 | 3 from fxl4b;
			emit-sfx 256 | 3 from fxl4c;
			emit-sfx 256 | 3 from door1;
			emit-sfx 256 | 3 from door3;
			sleep 200;
			move door2 to y-axis [-5] speed [20];
			move door4 to y-axis [-5] speed [20];
			move arm1 to x-axis [1.5] speed [6];
			move arm3 to x-axis [1.5] speed [6];
			turn nano1 to y-axis <-44> speed <176>;
			turn nano3 to y-axis <44> speed <176>;
			emit-sfx 256 | 3 from fxr5a;
			emit-sfx 256 | 3 from fxr5b;
			emit-sfx 256 | 3 from fxr5c;
			emit-sfx 256 | 3 from door2;
			emit-sfx 256 | 3 from door4;
			sleep 50;			
			emit-sfx 256 | 3 from nano1;
			emit-sfx 256 | 3 from nano3;			
			sleep 150;
			move arm2 to x-axis [-1.5] speed [6];
			move arm4 to x-axis [-1.5] speed [6];
			turn nano2 to y-axis <44> speed <176>;
			turn nano4 to y-axis <-44> speed <176>;
			emit-sfx 256 | 3 from fxl5a;
			emit-sfx 256 | 3 from fxl5b;
			emit-sfx 256 | 3 from fxl5c;
			sleep 250;
			emit-sfx 256 | 3 from nano2;
			emit-sfx 256 | 3 from nano4;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			spin pad around y-axis speed <30>;
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 and On_4 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			move arm1 to x-axis [0] speed [6];
			move arm3 to x-axis [0] speed [6];
			turn nano1 to y-axis <0> speed <176>;
			turn nano3 to y-axis <0> speed <176>;
			move arm2 to x-axis [0] speed [6];
			move arm4 to x-axis [0] speed [6];
			turn nano2 to y-axis <0> speed <176>;
			turn nano4 to y-axis <0> speed <176>;
			emit-sfx 256 | 3 from nano1;
			emit-sfx 256 | 3 from nano2;
			emit-sfx 256 | 3 from nano3;
			emit-sfx 256 | 3 from nano4;
			sleep 250;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			move door1 to y-axis 0 speed [10];
			move door2 to y-axis 0 speed [10];
			move door3 to y-axis 0 speed [10];
			move door4 to y-axis 0 speed [10];
			move slider1 to x-axis [0] speed [25];
			sleep 100;
			move slidel1 to x-axis [0] speed [25];
			sleep 300;
			emit-sfx 256 | 3 from fxr1a;
			emit-sfx 256 | 3 from fxr1b;
			emit-sfx 256 | 3 from fxr1c;
			move slider2 to x-axis [0] speed [25];
			sleep 100;
			emit-sfx 256 | 3 from door1;
			emit-sfx 256 | 3 from door2;
			emit-sfx 256 | 3 from door3;
			emit-sfx 256 | 3 from door4;
			emit-sfx 256 | 3 from fxl1a;
			emit-sfx 256 | 3 from fxl1b;
			emit-sfx 256 | 3 from fxl1c;
			move slidel2 to x-axis [0] speed [25];
			sleep 300;
			emit-sfx 256 | 3 from fxr2a;
			emit-sfx 256 | 3 from fxr2b;
			emit-sfx 256 | 3 from fxr2c;
			move slider3 to x-axis [0] speed [25];
			sleep 100;
			emit-sfx 256 | 3 from fxl2a;
			emit-sfx 256 | 3 from fxl2b;
			emit-sfx 256 | 3 from fxl2c;
			move slidel3 to x-axis [10] speed [25];
			sleep 300;
			emit-sfx 256 | 3 from fxr3a;
			emit-sfx 256 | 3 from fxr3b;
			emit-sfx 256 | 3 from fxr3c;
			move slider4 to x-axis [-10] speed [25];
			sleep 100;
			emit-sfx 256 | 3 from fxl3a;
			emit-sfx 256 | 3 from fxl3b;
			emit-sfx 256 | 3 from fxl3c;
			move slidel4 to x-axis [10] speed [25];
			sleep 300;
			emit-sfx 256 | 3 from fxr4a;
			emit-sfx 256 | 3 from fxr4b;
			emit-sfx 256 | 3 from fxr4c;
			sleep 100;
			emit-sfx 256 | 3 from fxl4a;
			emit-sfx 256 | 3 from fxl4b;
			emit-sfx 256 | 3 from fxl4c;

		}
		Busy_5 = 0;
	}
	return (0);
}

Create()
{
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade nano3;
	dont-shade nano4;
	dont-shade arm1;
	dont-shade arm2;
	dont-shade arm3;
	dont-shade arm4;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = b1;
	}
	if( Nano_1 == 1 )
	{
		piecenum = b2;
	}
	if( Nano_1 == 2 )
	{
		piecenum = b3;
	}
	++Nano_1;
	if( Nano_1 > 3 )
	{
		piecenum = b4;
		Nano_1 = 0;
	}
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 8000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

StartBuilding()
{
	spin pad around y-axis speed <40>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP5;
		explode nano3 type BITMAPONLY | BITMAP4;
		explode nano4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode fxr5a type BITMAPONLY | BITMAP3;
		explode fxr5b type BITMAPONLY | BITMAP3;
		explode fxr5c type BITMAPONLY | BITMAP3;
		explode fxl5a type BITMAPONLY | BITMAP3;
		explode fxl5b type BITMAPONLY | BITMAP3;
		explode fxl5c type BITMAPONLY | BITMAP3;
		explode nano1 type BITMAPONLY | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP5;
		explode nano3 type BITMAPONLY | BITMAP4;
		explode nano4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode fxr5a type BITMAPONLY | BITMAP3;
		explode fxr5b type BITMAPONLY | BITMAP3;
		explode fxr5c type BITMAPONLY | BITMAP3;
		explode fxl5a type BITMAPONLY | BITMAP3;
		explode fxl5b type BITMAPONLY | BITMAP3;
		explode fxl5c type BITMAPONLY | BITMAP3;
		explode nano1 type BITMAPONLY | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP5;
		explode nano3 type BITMAPONLY | BITMAP4;
		explode nano4 type BITMAPONLY | BITMAP5;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode door3 type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode fxr5a type BITMAPONLY | BITMAP3;
	explode fxr5b type BITMAPONLY | BITMAP3;
	explode fxr5c type BITMAPONLY | BITMAP3;
	explode fxl5a type BITMAPONLY | BITMAP3;
	explode fxl5b type BITMAPONLY | BITMAP3;
	explode fxl5c type BITMAPONLY | BITMAP3;
	explode fxr4a type BITMAPONLY | BITMAP3;
	explode fxr4b type BITMAPONLY | BITMAP3;
	explode fxr4c type BITMAPONLY | BITMAP3;
	explode fxl4a type BITMAPONLY | BITMAP3;
	explode fxl4b type BITMAPONLY | BITMAP3;
	explode fxl4c type BITMAPONLY | BITMAP3;
	explode nano1 type BITMAPONLY | BITMAP4;
	explode nano2 type BITMAPONLY | BITMAP5;
	explode nano3 type BITMAPONLY | BITMAP4;
	explode nano4 type BITMAPONLY | BITMAP5;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode door3 type BITMAPONLY | BITMAP4;
	explode door4 type BITMAPONLY | BITMAP5;
	return (0);
}