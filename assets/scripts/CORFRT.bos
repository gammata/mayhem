#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  flare1, flare2, flare3, base, turret, barrel1, barrel2, barrel3;

static-var  gun_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <15>;
	turn base to z-axis anglez speed <15>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0> - anglex speed <12>;
	turn base to z-axis <0> - anglez speed <12>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0> speed <3>;
	turn base to z-axis <0> speed <3>;
	return (0);
}

Create()
{
	dont-cache turret;
	dont-shade turret;
	dont-cache barrel1;
	dont-shade barrel1;
	dont-cache barrel2;
	dont-shade barrel2;
	dont-cache barrel3;
	dont-shade barrel3;
	hide flare1;
	hide flare2;
	hide flare3;
	gun_1 = flare1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <360>;
	turn turret to x-axis <0> - pitch speed <250>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 > 2 )
	{
		gun_1 = 0;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP4;
		explode barrel3 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel1 type FALL | BITMAP3;
		explode barrel2 type FALL | BITMAP4;
		explode barrel3 type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel3 type SHATTER | BITMAP5;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrel3 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}
