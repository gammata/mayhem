#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, beam3, beam4, nano1, nano2,
       nano3, nano4, plat1, plat2, door1, door2, door3, door4,
       fx1a, fx1b, fx2a, fx2b, fx3a, fx3b, fx4a, fx4b,
       cover1, cover2, cover3, cover4, fxe1, fxe2, fxe3, fxe4,
       fxe1a, fxe1b, fxe2a, fxe2b, fxe3a, fxe3b, fxe4a, fxe4b,
       spars, lights;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ReqState_3 != On_4 )
	{
		Busy_5 = 1;
		if( ReqState_3 and !On_4 )
		{
			emit-sfx 256 | 3 from fxe1a;
			emit-sfx 256 | 3 from fxe1b;
			emit-sfx 256 | 3 from fxe2a;
			emit-sfx 256 | 3 from fxe2b;
			turn door1 to z-axis <20> speed <25>;
			turn door2 to z-axis <20> speed <25>;
			turn door3 to z-axis <-20> speed <25>;
			turn door4 to z-axis <-20> speed <25>;
			sleep 100;
			emit-sfx 256 | 3 from fx1a;
			emit-sfx 256 | 3 from fx1b;
			emit-sfx 256 | 3 from fx2a;
			emit-sfx 256 | 3 from fx2b;
			emit-sfx 256 | 3 from fx3a;
			emit-sfx 256 | 3 from fx3b;
			emit-sfx 256 | 3 from fx4a;
			emit-sfx 256 | 3 from fx4b;
			move door1 to z-axis [-2] speed [2.5];
			move door2 to z-axis [2] speed [2.5];
			move door3 to z-axis [2] speed [2.5];
			move door4 to z-axis [-2] speed [2.5];
			sleep 700;
			turn door1 to z-axis <52.5> speed <40>;
			turn door2 to z-axis <52.5> speed <40>;
			turn door3 to z-axis <-52.5> speed <40>;
			turn door4 to z-axis <-52.5> speed <40>;
			sleep 100;
			move door1 to z-axis [-2.5] speed [0.6];
			move door2 to z-axis [2.5] speed [0.6];
			move door3 to z-axis [2.5] speed [0.6];
			move door4 to z-axis [-2.5] speed [0.6];
			sleep 700;
			turn cover1 to z-axis [179] speed [300];
			turn cover2 to z-axis [179] speed [300];
			turn cover3 to z-axis [-179] speed [300];
			turn cover4 to z-axis [-179] speed [300];
			sleep 400;
			move plat1 to x-axis [1] speed [1.98];
			move plat1 to x-axis [1] speed [1.98];
			sleep 100;
			turn nano1 to y-axis [-65] speed [160];
			turn nano2 to y-axis [65] speed [160];
			turn nano3 to y-axis [-65] speed [160];
			turn nano4 to y-axis [65] speed [160];
			sleep 406;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 and On_4 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			turn nano1 to y-axis [0] speed [260];
			turn nano2 to y-axis [65] speed [260];
			turn nano3 to y-axis [0] speed [260];
			turn nano4 to y-axis [0] speed [260];
			sleep 100;
			move plat1 to x-axis [0] speed [2.5];
			move plat2 to x-axis [0] speed [2.5];
			turn cover1 to z-axis [0] speed [300];
			turn cover4 to z-axis [0] speed [300];
			turn cover2 to z-axis [0] speed [300];
			turn cover3 to z-axis [0] speed [300];
			emit-sfx 256 | 3 from nano1;
			emit-sfx 256 | 3 from nano2;
			emit-sfx 256 | 3 from nano3;
			emit-sfx 256 | 3 from nano4;
			sleep 250;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			turn door1 to z-axis <20> speed <40>;
			turn door2 to z-axis <20> speed <40>;
			turn door3 to z-axis <20> speed <40>;
			turn door4 to z-axis <20> speed <40>;
			move door1 to z-axis [-2] speed [1.2];
			move door2 to z-axis [2] speed [1.2];
			move door3 to z-axis [2] speed [1.2];
			move door4 to z-axis [-2] speed [1.2];
			sleep 500;
			turn door1 to z-axis <0> speed <32>;
			turn door2 to z-axis <0> speed <32>;
			turn door3 to z-axis <0> speed <32>;
			turn door4 to z-axis <0> speed <32>;
			move door1 to z-axis [0] speed [3.2];
			move door2 to z-axis [0] speed [3.2];
			move door3 to z-axis [0] speed [3.2];
			move door4 to z-axis [0] speed [3.2];
			sleep 625;
		}
		Busy_5 = 0;
	}
	return (0);
}

Create()
{
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade nano3;
	dont-shade nano4;
	dont-shade plat1;
	dont-shade plat2;
	dont-shade cover1;
	dont-shade cover2;
	dont-shade cover3;
	dont-shade cover4;
	dont-shade spars;
	dont-shade lights;
	dont-cache base;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache nano3;
	dont-cache nano4;
	dont-cache plat1;
	dont-cache plat2;
	dont-cache cover1;
	dont-cache cover2;
	dont-cache cover3;
	dont-cache cover4;
	dont-cache spars;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	dont-cache lights;
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 == 1 )
	{
		piecenum = beam2;
	}
	if( Nano_1 == 2 )
	{
		piecenum = beam3;
	}
	++Nano_1;
	if( Nano_1 > 3 )
	{
		piecenum = beam4;
		Nano_1 = 0;
	}
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 8000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

AimFromTertiary(PieceNum)
{
	PieceNum = pad;
}

QueryTertiary(PieceNum)
{
	PieceNum = pad;
}
	
AimTertiary(Heading, Pitch)
{
	signal 4;
	set-signal-mask 4;
	if( Heading > <90> AND Heading < <270> )
	{
		turn pad to y-axis <180> speed <60>;
		Return(1);
	}
	turn pad to y-axis <0> speed <60>;
	Return(1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP5;
		explode nano3 type BITMAPONLY | BITMAP4;
		explode nano4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode fxe2a type BITMAPONLY | BITMAP3;
		explode fxe2b type BITMAPONLY | BITMAP3;
		explode fxe1a type BITMAPONLY | BITMAP3;
		explode fxe1b type BITMAPONLY | BITMAP3;
		explode nano1 type BITMAPONLY | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP5;
		explode nano3 type BITMAPONLY | BITMAP4;
		explode nano4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode fxe2a type BITMAPONLY | BITMAP3;
	explode fxe2b type BITMAPONLY | BITMAP3;
	explode fxe1a type BITMAPONLY | BITMAP3;
	explode fxe1b type BITMAPONLY | BITMAP3;
	explode nano1 type BITMAPONLY | BITMAP4;
	explode nano2 type BITMAPONLY | BITMAP5;
	explode nano3 type BITMAPONLY | BITMAP4;
	explode nano4 type BITMAPONLY | BITMAP5;
	explode plat1 type BITMAPONLY | BITMAP4;
	explode plat2 type BITMAPONLY | BITMAP5;
	return (0);
}