#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  launch1, launch2, launch3, base, body, turret, sleeve, barrel, flare;

static-var  hit_1, gun_2, reload_3, restore_delay, delay_6, AA_7;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from turret;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(AngleX, AngleZ)
{
	if( hit_1 )
	{
		return (0);
	}
	hit_1 = 1;
	turn base to z-axis AngleZ speed <105>;
	turn base to x-axis AngleX speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	hit_1 = 0;
}

Create()
{
	hide flare;
	gun_2;
	reload_3 = 0;
	restore_delay = 4000;
	delay_6 = 0;
	AA_7 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	hit_1 = 0;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	AA_7 = 0;
	turn turret to y-axis <0> speed <90>;
	turn sleeve to x-axis <0> speed <40>;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <160>;
	turn sleeve to x-axis <0> - pitch speed <75>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	move barrel to z-axis [-1.6] speed [500];
	sleep 150;
	hide flare;
	move barrel to z-axis [0] speed [1];
}


AimSecondary(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	while( delay_6 OR AA_7 )
	{
		wait-for-move launch1 along y-axis;
		wait-for-move launch2 along y-axis;
		wait-for-move launch3 along y-axis;
	}
	return (1);
}

AimTertiary(heading, pitch)
{
	AA_7 = 1;
	signal 16;
	signal 4;
	set-signal-mask 4;
	while( delay_6 )
	{
		wait-for-move launch1 along y-axis;
		wait-for-move launch2 along y-axis;
		wait-for-move launch3 along y-axis;
	}
	return (1);
}

FireSecondary()
{
	delay_6 = 1;
	if( !gun_2 )
	{
		move launch1 to y-axis [0.4] NOW;
		move launch1 to y-axis [0] speed [0.1];
	}
	if( gun_2 == 1 )
	{
		move launch2 to y-axis [0.4] NOW;
		move launch2 to y-axis [0] speed [0.1];
	}
	++gun_2;
	if( gun_2 > 2 )
	{
		move launch3 to y-axis [0.4] NOW;
		move launch3 to y-axis [0] speed [0.1];
		gun_2 = 0;
	}
	wait-for-move launch1 along y-axis;
	wait-for-move launch2 along y-axis;
	wait-for-move launch3 along y-axis;
	delay_6 = 0;
	return (0);
}

FireTertiary()
{
	delay_6 = 1;
	if( !gun_2 )
	{
		move launch1 to y-axis [0.4] NOW;
		move launch1 to y-axis [0] speed [0.1];
	}
	if( gun_2 == 1 )
	{
		move launch2 to y-axis [0.4] NOW;
		move launch2 to y-axis [0] speed [0.1];
	}
	++gun_2;
	if( gun_2 > 2 )
	{
		move launch3 to y-axis [0.4] NOW;
		move launch3 to y-axis [0] speed [0.1];
		gun_2 = 0;
	}
	wait-for-move launch1 along y-axis;
	wait-for-move launch2 along y-axis;
	wait-for-move launch3 along y-axis;
	AA_7 = 0;
	delay_6 = 0;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = gun_2;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = gun_2;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP4;
		explode sleeve type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode sleeve type SHATTER | SMOKE | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
