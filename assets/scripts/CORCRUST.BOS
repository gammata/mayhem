#define TA			// This is a TA script

piece flare1, flare2, base, body, counterbody, spine, counterspine, torso,
      lturret, lgun, barrel1, barrel2, othergun, lhipalign1, lhip1, lcounterhip1, 
      lleg1, lfoot1, lhipalign2, lhip2, lcounterhip2, lleg2, lfoot2, rhipalign1,
      rhip1, rcounterhip1, rleg1, rfoot1, rhipalign2, rhip2, rcounterhip2, rleg2,
      rfoot2, glow, sleeve, barrel, flare, turret;

#define SMOKEPIECE torso
#include "sfxtype.h"
#include "exptype.h"
#include "smokeunit.h"

static-var speed1,speed2,speed3,moving,facing,facing2,facing3,nextbarrel,aiming, started;

// Signal definitions
#define FBIMAXVELOCITY [0.85] * 12

Create()
{
	dont-cache flare1;
	dont-cache flare2;
	dont-cache flare;
	hide flare1;
	hide flare2;
	hide flare;
	speed1=FBIMAXVELOCITY;
	speed2=speed1 * 2;
	speed3=speed1 * 15;
	moving=0;
	nextbarrel=0;
	facing=0;
	aiming = 0;
	started = 0;
	dont-cache torso;
	set ARMORED to 1;
	while (get BUILD_PERCENT_LEFT)
	{
		sleep 400;
	}
	start-script SmokeUnit();
	while (1)
	{
		facing2 = get XZ_ATAN(0);
		facing3 = facing2 - facing;
		turn base to y-axis facing2 now;
		if( !aiming AND moving )
		{
			turn turret to y-axis (0 - facing3) speed <28>;
		}			
		turn counterbody to y-axis (0 - facing2) now;
		turn counterspine to y-axis facing2 now;
		turn lhipalign1 to y-axis (0 - facing2) now;
		turn lhipalign2 to y-axis (0 - facing2) now;
		turn rhipalign1 to y-axis (0 - facing2) now;
		turn rhipalign2 to y-axis (0 - facing2) now;
		turn lcounterhip1 to y-axis facing2 now;
		turn lcounterhip2 to y-axis facing2 now;
		turn rcounterhip1 to y-axis facing2 now;
		turn rcounterhip2 to y-axis facing2 now;
		sleep 66;
	}
}

Walking()
{
	set-signal-mask 8;
	sleep 66;
	while( moving )
	{
		move lfoot1 to y-axis 0 speed speed3;
		move rfoot2 to y-axis 0 speed speed3;
		move lcounterhip1 to z-axis [-2] speed speed1;
		move rcounterhip2 to z-axis [-2] speed speed1;
		move rcounterhip1 to z-axis [2] speed speed2;
		move lcounterhip2 to z-axis [2] speed speed2;
		move rfoot1 to y-axis [5] speed speed2;
		move lfoot2 to y-axis [5] speed speed2;
		if (moving == 2)
		{
			move counterspine to z-axis [2] speed speed2;
		}
		turn body to y-axis (0 - facing3) speed <45>;
		turn spine to y-axis facing3 speed <45>;
		turn torso to y-axis (0 - facing3) speed <45>;
		turn lhip1 to y-axis facing3 speed <45>;
		turn lhip2 to y-axis facing3 speed <45>;
		turn rhip1 to y-axis facing3 speed <45>;
		turn rhip2 to y-axis facing3 speed <45>;
		turn lleg1 to y-axis (0 - facing3) speed <45>;
		turn lleg2 to y-axis (0 - facing3) speed <45>;
		turn rleg1 to y-axis (0 - facing3) speed <45>;
		turn rleg2 to y-axis (0 - facing3) speed <45>;
		wait-for-move rfoot1 along y-axis;
		move counterspine to z-axis 0 speed speed1;
		if( !facing )
		{
			turn body to y-axis (0 - facing3) speed <0.25>;
		}
		turn spine to y-axis facing3 speed <0.25>;
		turn torso to y-axis (0 - facing3) speed <0.25>;
		turn lhip1 to y-axis facing3 speed <0.25>;
		turn lhip2 to y-axis facing3 speed <0.25>;
		turn rhip1 to y-axis facing3 speed <0.25>;
		turn rhip2 to y-axis facing3 speed <0.25>;
		turn lleg1 to y-axis (0 - facing3) speed <0.25>;
		turn lleg2 to y-axis (0 - facing3) speed <0.25>;
		turn rleg1 to y-axis (0 - facing3) speed <0.25>;
		turn rleg2 to y-axis (0 - facing3) speed <0.25>;
		wait-for-move rcounterhip1 along z-axis;
		wait-for-move lcounterhip1 along z-axis;
		move rfoot1 to y-axis 0 speed speed3;
		move lfoot2 to y-axis 0 speed speed3;
		move rcounterhip1 to z-axis [-2] speed speed1;
		move lcounterhip2 to z-axis [-2] speed speed1;
		move lcounterhip1 to z-axis [2] speed speed2;
		move rcounterhip2 to z-axis [2] speed speed2;
		move lfoot1 to y-axis [5] speed speed2;
		move rfoot2 to y-axis [5] speed speed2;
		if (moving == 2)
		{
			move counterspine to z-axis [2] speed speed1;
		}
		turn body to y-axis (0 - facing3) speed <45>;
		turn spine to y-axis facing3 speed <45>;
		turn torso to y-axis (0 - facing3) speed <45>;
		turn lhip1 to y-axis facing3 speed <45>;
		turn lhip2 to y-axis facing3 speed <45>;
		turn rhip1 to y-axis facing3 speed <45>;
		turn rhip2 to y-axis facing3 speed <45>;
		turn lleg1 to y-axis (0 - facing3) speed <45>;
		turn lleg2 to y-axis (0 - facing3) speed <45>;
		turn rleg1 to y-axis (0 - facing3) speed <45>;
		turn rleg2 to y-axis (0 - facing3) speed <45>;
		wait-for-move lfoot1 along y-axis;
		move counterspine to z-axis 0 speed speed1;
		if( !facing )
		{
			turn body to y-axis (0 - facing3) speed <0.25>;
		}
		turn spine to y-axis facing3 speed <0.25>;
		turn torso to y-axis (0 - facing3) speed <0.25>;
		turn lhip1 to y-axis facing3 speed <0.25>;
		turn lhip2 to y-axis facing3 speed <0.25>;
		turn rhip1 to y-axis facing3 speed <0.25>;
		turn rhip2 to y-axis facing3 speed <0.25>;
		turn lleg1 to y-axis (0 - facing3) speed <0.25>;
		turn lleg2 to y-axis (0 - facing3) speed <0.25>;
		turn rleg1 to y-axis (0 - facing3) speed <0.25>;
		turn rleg2 to y-axis (0 - facing3) speed <0.25>;
		wait-for-move lcounterhip1 along z-axis;
		wait-for-move rcounterhip1 along z-axis;
	}
}

StopWalking()
{
	set-signal-mask 16;
	signal 8;
	moving = 0;
	sleep 1;
	move lcounterhip1 to z-axis 0 speed speed1;
	move lcounterhip2 to z-axis 0 speed speed1;
	move rcounterhip1 to z-axis 0 speed speed1;
	move rcounterhip2 to z-axis 0 speed speed1;
	move lfoot1 to y-axis 0 speed speed1;
	move lfoot2 to y-axis 0 speed speed1;
	move rfoot1 to y-axis 0 speed speed1;
	move rfoot2 to y-axis 0 speed speed1;
	move counterspine to z-axis 0 speed speed1;
	stop-spin body around y-axis;
}

StartMoving()
{
	if( !moving )
	{
		signal 16;
		start-script Walking();
	}
	moving = 2;
	started = 1;
}

StopMoving()
{
	started = 0;
	sleep 1;
	if( moving == 2 )
	{
		start-script StopWalking();
	}
}

AimFromPrimary(p)
{
	p=torso;
}

RestoreAfterDelay()
{
	sleep 6000;
	facing=0;
	move glow to z-axis 0 speed [16.8];
}

RestoreTurret()
{
	sleep 4000;
	aiming = 2;
	turn turret to y-axis ( 0 - facing3 ) speed <200>;
	turn lgun to x-axis 0 speed <50>;
	wait-for-turn turret around y-axis;
	if( aiming == 2 )
	{
		aiming = 0;
	}
}

AimPrimary(h,p)
{
	aiming = 1;
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis ( h - facing2 ) speed <240>;
	turn lgun to x-axis 0 - p speed <70>;
	wait-for-move barrel1 along z-axis;
	wait-for-move barrel2 along z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn lgun around x-axis;
	start-script RestoreTurret();
	return 1;
}

FirePrimary()
{
	if ( !nextbarrel )
	{
		move barrel1 to z-axis [0.2] NOW;
		move barrel1 to z-axis 0 speed [0.2];
		show flare1;
		sleep 120;
		hide flare1;
	}
	if ( nextbarrel )
	{
		move barrel2 to z-axis [0.2] NOW;
		move barrel2 to z-axis 0 speed [0.2];
		show flare2;
		sleep 120;
		hide flare2;
	}
	nextbarrel = !nextbarrel;
}

QueryPrimary(p)
{
	p=nextbarrel;
}

AimFromTertiary(p)
{
	p=base;
}

AimTertiary(h,p)
{
	signal 4;
	set-signal-mask 4;
	facing=h;
	if (!facing)
	{
		facing=1;
	}
	move glow to z-axis [7.2] speed [3.6];
	turn body to y-axis h speed <0.3>;
	sleep 1;
	if( !moving )
	{
		signal 16;
		start-script Walking();
	}
	moving = 1;
	sleep 66;
	wait-for-turn body around y-axis;
	sleep 66;
	wait-for-turn body around y-axis;
	sleep 66;
	wait-for-turn body around y-axis;
	if( !started )
	{
		start-script StopWalking();
	}
	start-script RestoreAfterDelay();
	return 1;
}

FireTertiary()
{
	show flare;
	move barrel to z-axis [-3.3] speed [500];
	move glow to z-axis [0] NOW;
	sleep 150;
	hide flare;
	move barrel to z-axis [0] speed [3.3];
}

QueryTertiary(p)
{
	p=flare;
}

SweetSpot(p)
{
	p=base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode torso type BITMAPONLY | BITMAPNUKE;
		explode barrel1 type FALL | FIRE | BITMAP5;
		explode barrel2 type FALL | FIRE | BITMAP5;
		explode lleg1 type BITMAPONLY | BITMAP1;
		explode rleg1 type BITMAPONLY | BITMAP1;
		explode lleg2 type BITMAPONLY | BITMAP1;
		explode rleg2 type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP4;
		explode glow type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode torso type BITMAPONLY | BITMAPNUKE;
		explode barrel1 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel2 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg1 type FALL | BITMAP1;
		explode rleg1 type FALL | BITMAP1;
		explode lleg2 type FALL | BITMAP1;
		explode rleg2 type FALL | BITMAP1;
		explode sleeve type FALL | BITMAP4;
		explode barrel type BITMAPONLY | BITMAP4;
		explode glow type FALL | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode torso type BITMAPONLY | BITMAPNUKE;
		explode barrel1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lleg2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lfoot1 type BITMAPONLY | BITMAP2;
		explode rfoot1 type BITMAPONLY | BITMAP2;
		explode lfoot2 type BITMAPONLY | BITMAP2;
		explode rfoot2 type BITMAPONLY | BITMAP2;
		explode sleeve type FALL | BITMAP4;
		explode barrel type BITMAPONLY | BITMAP4;
		explode glow type FALL | FIRE | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode torso type BITMAPONLY | BITMAPNUKE;
	explode barrel1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode lleg2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode lfoot1 type BITMAPONLY | BITMAP2;
	explode rfoot1 type BITMAPONLY | BITMAP2;
	explode lfoot2 type BITMAPONLY | BITMAP2;
	explode rfoot2 type BITMAPONLY | BITMAP2;
	explode barrel type BITMAPONLY | BITMAP4;
	explode glow type FALL | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
