#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, collar, buttons, wedge, drawer, dummy;

static-var  Ready_1, Busy_2, Ready_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/	

Create()
{
	set ARMORED to 1;
	dont-shade dummy;
	dont-shade drawer;
	dont-shade dummy;
	dont-shade wedge;
	Ready_1 = 0;
	Busy_2 = 0;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 20000;
	set-signal-mask 0;
	Busy_2 = 1;
	Ready_1 = 0;
	set ARMORED to 1;
	move dummy to x-axis [0.000] speed [10.5];
	sleep 200;
	move drawer to y-axis [0.000] speed [18.8];
	sleep 500;
	move wedge to x-axis [0.000] speed [5.75];
	sleep 400;
	cache drawer;
	cache dummy;
	cache wedge;
	Busy_2 = 0;
}

AimPrimary(heading, pitch, sleeptime)
{
	sleeptime = Rand( 200, 1200 );
	while( Busy_2 )
	{
		sleep sleeptime;
	}
	if( !Ready_1 )
	{
		Busy_2 = 1;
		dont-cache drawer;
		dont-cache dummy;
		dont-cache wedge;
		move wedge to x-axis [2.3] speed [9.2];
		sleep 250;
		move drawer to y-axis [9.4] speed [20];
		sleep 470;
		move dummy to x-axis [-2.1] speed [20];
		set ARMORED to 0;
		sleep sleeptime;
		Ready_1 = 1;
		Busy_2 = 0;
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	sleep sleeptime;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary(sleeptime)
{
	sleeptime = Rand( 125, 2000 );
	Busy_2 = 1;
	hide dummy;
	sleep 500;
	move drawer to y-axis [0] speed [20];
	sleep 470;
	show dummy;
	move drawer to y-axis [9.4] speed [22];
	sleep 430;
	move dummy to x-axis [-2.1] speed [20];
	sleep sleeptime;
	Busy_2 = 0;
}

QueryPrimary(piecenum)
{
	piecenum = dummy;
}

AimFromPrimary(piecenum)
{
	piecenum = dummy;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	explode base type BITMAPONLY | BITMAP1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode wedge type BITMAPONLY | BITMAP2;
		explode drawer type BITMAPONLY | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode wedge type FALL | BITMAP2;
		explode drawer type SHATTER | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode drawer type SHATTER | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		return (0);
	}
	explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode drawer type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode dummy type BITMAPONLY | BITMAP4;
}
