#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Flare1, Flare2, guns, turret, turretbase, missile1, missile2, missile3,
       gun, box, counterbox, wake1, wake2, wake3, wake4, wake5, 
       wake6, wake7, wake8,  base, GP;

static-var Gun_1, Gun_2, depth_3, Busy_4, bMoving, bAiming, delay;

RestoreAfterDelay()
{
	sleep 4000;
	set-signal-mask 0;
	bAiming = 0;
	turn turret to x-axis <0> speed <240>;
	turn guns to y-axis <0> speed <120>;
	turn box to x-axis <0> speed <150>;
	turn gun to y-axis <0> speed <80>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( busy_4 )
	{
		return(0);
	}
	busy_4 = 1;
	turn base to z-axis Func_Var_2 speed <105>;
	turn base to x-axis Func_Var_1 speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	busy_4 = 0;
	return (0);
}

MotionControl(count)
{
	while( TRUE )
	{
		count = 0;
		if( depth_3 == 3 AND depth_3 != 0 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <36>;
			turn counterbox to y-axis get XZ_ATAN(0) speed <36>;
			turn turretbase to y-axis get XZ_ATAN(0) speed <36>;
			if( !bAiming )
			{
				turn turret to y-axis (0 - get XZ_ATAN(0)) speed <36>;
				turn box to y-axis (0 - get XZ_ATAN(0)) speed <36>;
			}
			++count;
			sleep 33;
		}
	}
}


setSFXoccupy(Func_Var_1)
{
	depth_3 = Func_Var_1;
	return (0);
}

Create()
{
	dont-cache Flare1;
	dont-cache Flare2;
	dont-cache missile1;
	dont-cache missile2;
	dont-cache missile3;
	hide Flare1;
	hide Flare2;
	hide missile1;
	hide missile2;
	hide missile3;
	Gun_1 = 0;
	Gun_2 = 0;
	Busy_4 = 0;
	bAiming = 0;
	bMoving = 0;
	delay = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
		turn turretbase to y-axis get XZ_ATAN(0) NOW;
		turn turret to y-axis (0 - get XZ_ATAN(0)) NOW;
		turn counterbox to y-axis get XZ_ATAN(0) NOW;
		turn box to y-axis (0 - get XZ_ATAN(0)) NOW;
	}
	start-script SmokeUnit();
	start-script MotionControl(0);
	return (0);
}


AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	bAiming = 1;
	turn turret to y-axis ( heading - get XZ_ATAN(0)) speed <640>;
	turn turret to x-axis <0> - pitch speed <500>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	move guns to z-axis [-3] speed [500];
	if( !gun_1 )
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
	if( gun_1 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	move guns to z-axis [0] speed [12];
	gun_1 = !gun_1;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	bAiming = 1;
	turn box to y-axis ( heading - get XZ_ATAN(0)) speed <360>;
	turn gun to x-axis 0 - pitch speed <240>;
	while( delay )
	{
		sleep 200;
	}
	wait-for-turn box around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	delay = 1;
	if( !gun_2 )
	{
		show missile1;
		sleep 150;
		hide missile1;
	}
	if( gun_2 == 1 )
	{
		show missile2;
		sleep 150;
		hide missile2;
	}
	++gun_2;
	if( gun_2 > 3 )
	{
		show missile3;
		sleep 150;
		hide missile3;
		gun_2 = 0;
	}
	sleep 1850;
	delay = 0;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

QueryPrimary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = missile1;
	}
	if( gun_2 == 1 )
	{
		piecenum = missile2;
	}
	if( gun_2 > 1 )
	{
		piecenum = missile3;
	}
	
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( depth_3 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode base type BITMAPONLY | BITMAP1;
			explode gun type SHATTER | BITMAP2;
			explode box type BITMAPONLY | BITMAP3;
			explode guns type BITMAPONLY | BITMAP4;
			explode turretbase type BITMAPONLY | BITMAP5;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode gun type SHATTER | BITMAP2;
		explode box type FALL | BITMAP3;
		explode guns type FALL | BITMAP4;
		explode turretbase type FALL | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode gun type SHATTER | BITMAP2;
		explode box type FALL | SMOKE | BITMAP3;
		explode guns type FALL | SMOKE | BITMAP4;
		explode turretbase type FALL | SMOKE | BITMAP5;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode box type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode guns type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turretbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}