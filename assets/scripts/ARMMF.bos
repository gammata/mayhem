#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  r1, r2, r3, r4, r5, r6, r7, r8,
       a1, a2, a3, a4, rockets, aa, door1b, door1a,
       door2b, door2a, door3b, door3a, door4b, door4a, flare, barrel, 
       sleeve, turret, chassis, rocker, lm, rm, lmf, lmb,  
       rmf, rmb, rb, rbf, rbb, lbb, lbf, lb, 
       trb, tlb, lfb, lff, rfb, rff, rf, lf, 
       fc, boxl, boxr, dish, radar1, radar2, base;

static-var wait_1, gun_2, gun_3, busy_2, busy_3, ready_2, ready_3, hit_8;

static-var restore_9, restore_10, reset_11, reset_12, bMoving;

RestoreCannon()
{
	sleep 15000;
	if( !restore_9 )
	{
		turn turret to y-axis <0> speed <30>;
		turn sleeve to x-axis <0> speed <16>;
		signal 2;
	}
	reset_11 = 0;
}

RestoreMissiles()
{
	sleep 5000;
	if ( !restore_10 )
	{
		busy_2 = 1;
		busy_3 = 1;
		ready_2 = 0;
		ready_3 = 0;
		move aa to y-axis [0] speed [1];
		turn door3a to z-axis <0> speed <102>;
		turn door3b to z-axis <0> speed <210>;
		turn door4a to z-axis <0> speed <102>;
		turn door4b to z-axis <0> speed <210>;
		move rockets to y-axis [0] speed [1];
		turn door1a to z-axis <0> speed <85>;
		turn door1b to z-axis <0> speed <175>;
		turn door2a to z-axis <0> speed <85>;
		turn door2b to z-axis <0> speed <175>;
		signal 4;
		signal 16;
		wait-for-turn door3a around z-axis;
		busy_3 = 0;
		wait-for-turn door1a around z-axis;
		busy_2 = 0;
	}
	reset_12 = 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Restore_9 AND ( !Reset_11 ) )
		{
			Restore_9 = FALSE;
			Reset_11 = 1;
			start-script RestoreCannon();
		}
		if( Restore_10 AND ( !Reset_12 ) )
		{
			Restore_10 = FALSE;
			Reset_12 = 1;
			start-script RestoreMissiles();
		}
	}
}

Moving()
{
	var dir, justmoved, rfront, rmid, rback, lfront, lmid, lback;
	dir = get XZ_ATAN(0);
	lfront = get XZ_HYPOT(get PIECE_XZ(lff) - get PIECE_XZ(lfb));
	lmid = get XZ_HYPOT(get PIECE_XZ(lmf) - get PIECE_XZ(lmb));
	lback = get XZ_HYPOT(get PIECE_XZ(lbf) - get PIECE_XZ(lbb));
	rfront = get XZ_HYPOT(get PIECE_XZ(rff) - get PIECE_XZ(rfb));
	rmid = get XZ_HYPOT(get PIECE_XZ(rmf) - get PIECE_XZ(rmb));
	rback = get XZ_HYPOT(get PIECE_XZ(rbf) - get PIECE_XZ(rbb));
	justmoved = 0;
	while( TRUE )
	{
		if( bMoving )
		{
			justmoved = 1;
			dir = dir - get XZ_ATAN(0);
			if( bMoving == 1 )
			{
				if(( dir > <2> ) OR ( dir < <-2> ))
				{
					turn fc to y-axis <24> speed <24>;
					if( dir < <-2> )
					{
						turn fc to y-axis <-24> speed <24>;
					}					
					turn lb to y-axis <18> speed <18>;
					turn rb to y-axis <-18> speed <18>;
				}
			}
			if( bMoving == 2)
			{
				turn fc to y-axis 8 * dir speed <24>;
				turn lb to y-axis 0 - ( 6 * dir ) speed <18>;
				turn rb to y-axis 0 - ( 6 * dir ) speed <18>;
			}
			if(	bMoving == 3)
			{
				turn fc to y-axis 4 * dir speed <24>;
				turn lb to y-axis 0 - ( 3 * dir ) speed <18>;
				turn rb to y-axis 0 - ( 3 * dir ) speed <18>;
			}
			dir = get XZ_ATAN(0);
		}
		if( justmoved )
		{
			justmoved = 0;
			turn lb to x-axis (get ATAN((get PIECE_Y(lbf) - get GROUND_HEIGHT(get PIECE_XZ(lbf))) - (get PIECE_Y(lbb) - get GROUND_HEIGHT(get PIECE_XZ(lbb))),lback)) speed <300>;
			turn lm to x-axis (get ATAN((get PIECE_Y(lmf) - get GROUND_HEIGHT(get PIECE_XZ(lmf))) - (get PIECE_Y(lmb) - get GROUND_HEIGHT(get PIECE_XZ(lmb))),lmid)) speed <300>;
			turn lf to x-axis (get ATAN((get PIECE_Y(lff) - get GROUND_HEIGHT(get PIECE_XZ(lff))) - (get PIECE_Y(lfb) - get GROUND_HEIGHT(get PIECE_XZ(lfb))),lfront)) speed <300>;
			turn rb to x-axis (get ATAN((get PIECE_Y(rbf) - get GROUND_HEIGHT(get PIECE_XZ(rbf))) - (get PIECE_Y(rbb) - get GROUND_HEIGHT(get PIECE_XZ(rbb))),rback)) speed <300>;	
			turn rm to x-axis (get ATAN((get PIECE_Y(rmf) - get GROUND_HEIGHT(get PIECE_XZ(rmf))) - (get PIECE_Y(rmb) - get GROUND_HEIGHT(get PIECE_XZ(rmb))),rmid)) speed <300>;
			turn rf to x-axis (get ATAN((get PIECE_Y(rff) - get GROUND_HEIGHT(get PIECE_XZ(rff))) - (get PIECE_Y(rfb) - get GROUND_HEIGHT(get PIECE_XZ(rfb))),rfront)) speed <300>;		
			if( !bMoving )
			{
				turn fc to y-axis <0> speed <30>;
				turn lb to y-axis <0> speed <18>;
				turn rb to y-axis <0> speed <18>;
			}
		}
		sleep 160;
	}
}

Create()
{
	hide flare;
	dont-cache flare;
	spin flare around z-axis speed <700>;
	dont-cache boxl;
	dont-cache boxr;
	wait_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	busy_2 = 0;
	busy_3 = 0;
	ready_2 = 0;
	ready_3 = 0;
	hit_8 = 0;
	restore_9 = 0;
	restore_10 = 0;
	reset_11 = 0;
	reset_12 = 0;
	bMoving = 0;
	set ARMORED to TRUE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	start-script Moving();
}

Activate()
{
	dont-cache boxl;
	dont-cache boxr;
	spin dish around y-axis speed <40>;
	spin radar1 around x-axis speed <90>;
	spin radar2 around x-axis speed <-90>;
}

Deactivate()
{
	cache boxl;
	cache boxr;
	spin dish around y-axis speed <0>;
	spin radar1 around x-axis speed <0>;
	spin radar2 around x-axis speed <0>;
	turn dish to y-axis <0> speed <40>;
	turn radar1 to x-axis <0> speed <80>;
	turn radar2 to x-axis <0> speed <-80>;
}

StartMoving()
{
	bMoving = 1;
}

StopMoving()
{
	bMoving = 0;
}
	
MoveRate1()
{
	bMoving=1;
}
	
MoveRate2()
{
	bMoving=2;
}
	
MoveRate3()
{
	bMoving=3;
}

AimTertiary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <45>;
	turn sleeve to x-axis <0> - pitch speed <27>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	restore_9 = 1;
	return (1);
}

ReadyRockets()
{
	if( !ready_2 )
	{
		busy_2 = 1;
		turn door1a to z-axis <85> speed <170>;
		turn door1b to z-axis <-175> speed <350>;
		turn door2a to z-axis <-85> speed <170>;
		turn door2b to z-axis <175> speed <350>;
		move rockets to y-axis [3] speed [6];
		wait-for-turn door1a around z-axis;
		ready_2 = 1;
		busy_2 = 0;
	}
}	

AimPrimary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	while( !ready_2 )
	{
		if( !busy_2 )
		{
			start-script ReadyRockets();
		}
		sleep 200;
	}
	if( gun_2 >= 7 )
	{
		wait-for-move r8 along y-axis;
	}
	restore_10 = 1;
	return(1);
}

ReadyMissiles()
{
	if( !ready_3 )
	{
		busy_3 = 1;
		turn door3a to z-axis <85> speed <180>;
		turn door3b to z-axis <-175> speed <370>;
		turn door4a to z-axis <-85> speed <180>;
		turn door4b to z-axis <175> speed <370>;
		move aa to y-axis [0.5] speed [1.2];
		wait-for-turn door3a around z-axis;
		ready_3 = 1;
		busy_3 = 0;
	}
}

AimSecondary(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	while( !ready_3 )
	{
		if( !busy_3 )
		{
			start-script ReadyMissiles();
		}
		sleep 250;
	}
	restore_10 = 1;
	return(1);
}

FireTertiary()
{
	show flare;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from flare;
	emit-sfx 256 | 1 from flare;
	move barrel to z-axis [-5] speed [500];
	sleep 125;
	hide flare;
	move barrel to z-axis [0] speed [2];
}

FirePrimary()
{
	if( !gun_2 )
	{
		move r1 to y-axis [-3] NOW;
		move r1 to y-axis [0] speed [2.4];
	}
	if( gun_2 == 1 )
	{
		move r2 to y-axis [-3] NOW;
		move r2 to y-axis [0] speed [2.4];
	}
	if( gun_2 == 2 )
	{
		move r3 to y-axis [-3] NOW;
		move r3 to y-axis [0] speed [2.4];
	}
	if( gun_2 == 3 )
	{
		move r4 to y-axis [-3] NOW;
		move r4 to y-axis [0] speed [2.4];
	}
	if( gun_2 == 4 )
	{
		move r5 to y-axis [-3] NOW;
		move r5 to y-axis [0] speed [2.4];
	}
	if( gun_2 == 5 )
	{
		move r6 to y-axis [-3] NOW;
		move r6 to y-axis [0] speed [2.4];
	}
	if( gun_2 == 6 )
	{
		move r7 to y-axis [-3] NOW;
		move r7 to y-axis [0] speed [2.4];
	}
	++gun_2;
	if( gun_2 > 7 )
	{
		move r8 to y-axis [-3] NOW;
		move r8 to y-axis [0] speed [2.4];
		wait-for-move r8 along y-axis;
		gun_2 = 0;
	}
}

FireSecondary()
{
	if( !gun_3 )
	{
		move a1 to y-axis [-1.2] NOW;
		sleep 200;
		move a1 to y-axis [0] speed [1];
	}
	if( gun_3 == 1 )
	{
		move a2 to y-axis [-1.2] NOW;
		sleep 200;
		move a2 to y-axis [0] speed [1];
	}
	if( gun_3 == 2 )
	{
		move a3 to y-axis [-1.2] NOW;
		sleep 200;
		move a3 to y-axis [0] speed [1];
	}
	++gun_3;
	if( gun_3 > 3 )
	{
		move a4 to y-axis [-1.2] NOW;
		sleep 200;
		move a4 to y-axis [0] speed [1];
		gun_3 = 0;
	}
}

QueryTertiary(piecenum)
{
	piecenum = flare;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = r1;
		return(0);
	}
	if( gun_2 == 1 )
	{
		piecenum = r2;
		return(0);
	}
	if( gun_2 == 2 )
	{
		piecenum = r3;
		return(0);
	}
	if( gun_2 == 3 )
	{
		piecenum = r4;
		return(0);
	}
	if( gun_2 == 4 )
	{
		piecenum = r5;
		return(0);
	}
	if( gun_2 == 5 )
	{
		piecenum = r6;
		return(0);
	}
	if( gun_2 == 6 )
	{
		piecenum = r7;
		return(0);
	}
	if( gun_2 == 7 )
	{
		piecenum = r8;
		return(0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = rockets;
}

QuerySecondary(piecenum)
{
	if( !gun_3 )
	{
		piecenum = a1;
		return(0);
	}
	if( gun_3 == 1 )
	{
		piecenum = a2;
		return(0);
	}
	if( gun_3 == 2 )
	{
		piecenum = a3;
		return(0);
	}
	if( gun_3 == 3 )
	{
		piecenum = a4;
		return(0);
	}
}

AimFromSecondary(piecenum)
{
	piecenum = aa;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
		explode barrel type BITMAPONLY | BITMAP4;
		explode a1 type FALL | BITMAP4;
		explode a2 type FALL | BITMAP4;
		explode a3 type FALL | BITMAP3;
		explode a4 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode sleeve type SHATTER | BITMAP3;
		explode barrel type BITMAPONLY | BITMAP4;
		explode a1 type FALL | SMOKE | BITMAP4;
		explode a2 type FALL | SMOKE | BITMAP4;
		explode a3 type FALL | SMOKE | BITMAP3;
		explode a4 type FALL | SMOKE | BITMAP5;
		explode door3a type FALL | SMOKE | BITMAP1;
		explode door3b type FALL | SMOKE | BITMAP2;
		explode door4a type FALL | SMOKE | BITMAP3;
		explode door4b type FALL | SMOKE | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode sleeve type SHATTER | BITMAP3;
		explode barrel type BITMAPONLY | BITMAP4;
		explode a1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode a2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode a3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode a4 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode door3a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode door3b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode door4a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode door4b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode barrel type BITMAPONLY | BITMAP4;
	explode a1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode a2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode a3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode a4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door3a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door4a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door4b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
