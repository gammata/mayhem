#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, barrel1, barrel2, gun, turret, tower, body, 
       strutf1, strutf2, strutb1, strutb2, trackf1, trackf2, trackb1, trackb2, 
       base;

static-var  gun_1, Ready_2, restore_delay, bMoving, deployed, busy;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState()
{
	while(TRUE)
	{
		if( bMoving and deployed )
		{
			set ARMORED to 0;
			deployed = 0;
			turn trackf1 to z-axis <0> speed <105>;
			turn trackb1 to z-axis <0> speed <105>;
			turn trackf2 to z-axis <0> speed <105>;
			turn trackb2 to z-axis <0> speed <105>;
			turn strutf2 to z-axis <0> speed <160>;
			turn strutf1 to z-axis <0> speed <160>;
			turn strutb2 to z-axis <0> speed <160>;
			turn strutb1 to z-axis <0> speed <160>;
			move body to y-axis [0] speed [2];
			sleep 500;
			move tower to y-axis [0] speed [8];
			move gun to y-axis [0] speed [2.6]; 
			sleep 500;
		}
		if( !bMoving and !deployed )
		{
			sleep 800;
			if( !bMoving )
			{
				deployed = 1;
				set ARMORED to 1;
				turn trackf1 to z-axis <-105> speed <105>;
				turn trackb1 to z-axis <-105> speed <105>;
				turn trackf2 to z-axis <105> speed <105>;
				turn trackb2 to z-axis <105> speed <105>;
				move tower to y-axis [4] speed [4];
				move body to y-axis [3] speed [3];
				move gun to y-axis [1.3] speed [2.6]; 
				sleep 500;
				turn strutf1 to z-axis <-105> speed <180>;
				turn strutb1 to z-axis <-105> speed <180>;
				turn strutf2 to z-axis <-105> speed <180>;
				turn strutb2 to z-axis <105> speed <180>;
				sleep 600;
			}
		}
		sleep 200;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	Ready_2 = 1;
	gun_1 = 0;
	restore_delay = 3000;
	bMoving = 0;
	deployed = 0;
	busy = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	start-script RequestState();
}

StartMoving()
{
	bMoving = 1;
}

StopMoving()
{
	bMoving = 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0> speed <120>;
	turn gun to x-axis <0> speed <50>;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

AimPrimary(heading,pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <250>;
	turn gun to x-axis (0 - pitch) speed <60>;
	while( !Ready_2 )
	{
		wait-for-move barrel1 along z-axis;
		wait-for-move barrel2 along z-axis;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return(1);
}

FirePrimary()
{
	var speed1;
	speed1 = [0.75];
	if( deployed )
	{
		speed1 = [1.2];
	}
	Ready_2 = 0;
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-1.2] NOW;
		show flare1;
		move barrel1 to z-axis [0] speed speed1;
		sleep 120;
		hide flare1;
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-1.2] NOW;
		show flare2;
		sleep 50;
		move barrel2 to z-axis [0] speed speed1;
		sleep 120;
		hide flare2;
	}
	gun_1 = !gun_1;
	wait-for-move barrel1 along z-axis;
	wait-for-move barrel2 along z-axis;
	Ready_2 = 1;
}

Killed(severity,corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode gun type BITMAPONLY | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode gun type BITMAPONLY | BITMAP3;
		explode barrel1 type FALL | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | BITMAP2;
		explode gun type SHATTER | BITMAP3;
		explode barrel1 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2 type FALL | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gun type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}