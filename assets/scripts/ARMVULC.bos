#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  barrel01, barrel02, barrel03, barrel04, barrel05, barrel06, barrel07, barrel08,  
       block01, block02, block03, block04, block05, block06, block07, block08,
       housing01, housing02, housing03, housing04, housing05, housing06, housing07, housing08,
       flare, spindle, neck, mover, aimpt, turret, dummy, base;

static-var  Barrel_1, Rapidfire_2, Ready_3, aimpt_4, start;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare;
	dont-cache flare;
	hide barrel01;
	hide barrel02;
	hide barrel03;
	hide barrel04;
	hide barrel05;
	hide barrel06;
	hide barrel07;
	hide barrel08;
	hide block01;
	hide block02;
	hide block03;
	hide block04;
	hide block05;
	hide block06;
	hide block07;
	hide block08;
	hide housing01;
	hide housing02;
	hide housing03;
	hide housing04;
	hide housing05;
	hide housing06;
	hide housing07;
	hide housing08;
	hide spindle;
	hide neck;
	hide turret;
	dont-shade dummy;
	var buildangle;
	buildangle = 0;
	turn dummy to y-axis buildangle NOW;
	Barrel_1 = 0;
	Rapidfire_2 = 1;
	Ready_3 = 1;
	start= 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	sleep 100;
	turn turret to y-axis buildangle NOW;
	hide dummy;
	show barrel01;
	show barrel02;
	show barrel03;
	show barrel04;
	show barrel05;
	show barrel06;
	show barrel07;
	show barrel08;
	show block01;
	show block02;
	show block03;
	show block04;
	show block05;
	show block06;
	show block07;
	show block08;
	show housing01;
	show housing02;
	show housing03;
	show housing04;
	show housing05;
	show housing06;
	show housing07;
	show housing08;
	show spindle;
	show neck;
	show turret;
	dont-shade barrel01;
	dont-shade barrel02;
	dont-shade barrel03;
	dont-shade barrel04;
	dont-shade barrel05;
	dont-shade barrel06;
	dont-shade barrel07;
	dont-shade barrel08;
	dont-shade block01;
	dont-shade block02;
	dont-shade block03;
	dont-shade block04;
	dont-shade block05;
	dont-shade block06;
	dont-shade block07;
	dont-shade block08;
	dont-shade housing01;
	dont-shade housing02;
	dont-shade housing03;
	dont-shade housing04;
	dont-shade housing05;
	dont-shade housing06;
	dont-shade housing07;
	dont-shade housing08;
	dont-shade spindle;
	dont-shade neck;
	dont-shade turret;
	spin flare around z-axis speed <250>;
	sleep 100;
	start = 1;
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	Rapidfire_2 = 1;
	Ready_3 = 1;
	return (0);
}

Deactivate()
{
	Rapidfire_2 = 0;
//	signal 2;
//	set-signal-mask 0;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	while( !start )
	{
		sleep 200;
	}
	turn turret to y-axis heading speed <10>;
	turn neck to x-axis ( <0> - pitch ) speed <2.4>;
	wait-for-turn turret around y-axis;
	wait-for-turn neck around x-axis;
	while( !Ready_3 )
	{
		sleep 250;
	}
	return (1);
}

FirePrimary()
{
	show flare;
	spin mover around z-axis speed <150>;
	spin mover around x-axis speed <300>;
	move flare to z-axis [-10] speed [500];
	if( !Barrel_1 )
	{
		move block01 to z-axis [-10] speed [500];
		sleep 100;
		move block01 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 1 )
	{
		show flare;
		move block02 to z-axis [-10] speed [500];
		sleep 100;
		move block02 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 2 )
	{
		show flare;
		move block03 to z-axis [-10] speed [500];
		sleep 100;
		move block03 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 3 )
	{
		show flare;
		move block04 to z-axis [-10] speed [500];
		sleep 100;
		move block04 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 4 )
	{
		move block05 to z-axis [-10] speed [500];
		sleep 100;
		move block05 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 5 )
	{
		show flare;
		move block06 to z-axis [-10] speed [500];
		sleep 100;
		move block06 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 6 )
	{
		show flare;
		move block07 to z-axis [-10] speed [500];
		sleep 100;
		move block07 to z-axis [0] speed [16];
	}
	if( Barrel_1 > 6 )
	{
		show flare;
		move block08 to z-axis [-10] speed [500];
		sleep 100;
		move block08 to z-axis [0] speed [16];
	}
	Ready_3 = 0;
	hide flare;
	move flare to z-axis [0] NOW;
	++Barrel_1;
	if( barrel_1 > 7 )
	{
		barrel_1 = 0;
	}
	sleep 100;
	turn spindle to z-axis <45> * Barrel_1 speed <450>;
	turn barrel01 to z-axis <-45> * Barrel_1 speed <450>;
	turn barrel02 to z-axis <-45> * Barrel_1 speed <450>;
	turn barrel03 to z-axis <-45> * Barrel_1 speed <450>;
	turn barrel04 to z-axis <-45> * Barrel_1 speed <450>;
	turn barrel05 to z-axis <-45> * Barrel_1 speed <450>;
	turn barrel06 to z-axis <-45> * Barrel_1 speed <450>;
	turn barrel07 to z-axis <-45> * Barrel_1 speed <450>;
	turn barrel08 to z-axis <-45> * Barrel_1 speed <450>;
	if( !Rapidfire_2 )
	{
		sleep 4000;	
	}
	Ready_3 = 1;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

AimFromPrimary(piecenum)
{
	if( Rapidfire_2 )
	{
		piecenum = aimpt;
		return (0);
	}
	piecenum = mover;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel01 type BITMAPONLY | BITMAP1;
		explode barrel02 type BITMAPONLY | BITMAP2;
		explode barrel03 type BITMAPONLY | BITMAP3;
		explode barrel04 type BITMAPONLY | BITMAP4;
		explode barrel05 type BITMAPONLY | BITMAP1;
		explode barrel06 type BITMAPONLY | BITMAP2;
		explode barrel07 type BITMAPONLY | BITMAP3;
		explode barrel08 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode block01 type BITMAPONLY | BITMAP3;
		explode block02 type BITMAPONLY | BITMAP4;
		explode block03 type BITMAPONLY | BITMAP1;
		explode block04 type BITMAPONLY | BITMAP2;
		explode block05 type BITMAPONLY | BITMAP3;
		explode block06 type BITMAPONLY | BITMAP4;
		explode block07 type BITMAPONLY | BITMAP1;
		explode block08 type BITMAPONLY | BITMAP2;
		explode housing01 type BITMAPONLY | BITMAP2;
		explode housing02 type BITMAPONLY | BITMAP3;
		explode housing03 type BITMAPONLY | BITMAP4;
		explode housing04 type BITMAPONLY | BITMAP1;
		explode housing05 type BITMAPONLY | BITMAP2;
		explode housing06 type BITMAPONLY | BITMAP3;
		explode housing07 type BITMAPONLY | BITMAP4;
		explode housing08 type BITMAPONLY | BITMAP1;
		explode neck type BITMAPONLY | BITMAP5;
		explode spindle type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel01 type BITMAPONLY | BITMAP1;
		explode barrel02 type BITMAPONLY | BITMAP2;
		explode barrel03 type BITMAPONLY | BITMAP3;
		explode barrel04 type BITMAPONLY | BITMAP4;
		explode barrel05 type BITMAPONLY | BITMAP1;
		explode barrel06 type BITMAPONLY | BITMAP2;
		explode barrel07 type BITMAPONLY | BITMAP3;
		explode barrel08 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode block01 type FALL | BITMAP3;
		explode block02 type FALL | BITMAP4;
		explode block03 type FALL | BITMAP1;
		explode block04 type FALL | BITMAP2;
		explode housing01 type FALL | BITMAP2;
		explode housing02 type FALL | BITMAP3;
		explode housing03 type FALL | BITMAP4;
		explode housing04 type FALL | BITMAP1;
		explode housing05 type FALL | BITMAP2;
		explode housing06 type FALL | BITMAP3;
		explode housing07 type FALL | BITMAP4;
		explode housing08 type FALL | BITMAP1;
		explode neck type FALL | BITMAP5;
		explode spindle type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode barrel01 type BITMAPONLY | BITMAP1;
		explode barrel02 type BITMAPONLY | BITMAP2;
		explode barrel03 type BITMAPONLY | BITMAP3;
		explode barrel04 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode block01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode block02 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode block03 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode block04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode housing01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode housing02 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode housing03 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode housing04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode spindle type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	explode barrel01 type BITMAPONLY | BITMAP1;
	explode barrel02 type BITMAPONLY | BITMAP2;
	explode barrel03 type BITMAPONLY | BITMAP3;
	explode barrel04 type BITMAPONLY | BITMAP4;
	explode base type BITMAPONLY | BITMAP5;
	explode block01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode block02 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode block03 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode block04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode housing01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode housing02 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode housing03 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode housing04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode spindle type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
	return (0);
}