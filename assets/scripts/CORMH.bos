#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lmispoint, rmispoint, base, arm1, arm2, launcher, wake1, wake2,
       wake3, wake4, wake5, wake6, wake7, wake8, GP;

static-var  gun_1, State_2, depth_3, hit_4, Request_5, Busy_6;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( !hit_4 )
	{
		hit_4 = 1;
		turn base to z-axis Func_Var_2 speed <104.974>;
		turn base to x-axis Func_Var_1 speed <104.974>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0.000> speed <29.993>;
		turn base to x-axis <0.000> speed <29.993>;
		sleep 100;
		hit_4 = 0;
	}
}

RequestState()
{
	while( ( !Busy_6 ) AND Request_5 != State_2 )
	{
		Busy_6 = 1;
		if( Request_5 AND ( !State_2 ) )
		{
			move arm1 to z-axis [-0.45] speed [1];
			turn arm1 to x-axis <45> speed <50>;
			turn arm2 to x-axis <-135> speed <160>;
			turn base to x-axis <2> speed <5>;
			sleep 400;
			move arm1 to z-axis [-0.75] speed [0.6];
			turn base to x-axis <-3> speed <12>;
			sleep 400;
			move launcher to z-axis [2] speed [20];
			turn base to x-axis <0> speed <5>;
			sleep 100;
			wait-for-turn arm1 around x-axis;
			State_2 = 1;
		}
		if( ( !Request_5 ) AND State_2 )
		{
			State_2 = 0;
			move launcher to z-axis [0] speed [13];
			turn base to x-axis <-2> speed <8>;
			move arm1 to z-axis [-0.45] speed [1];
			turn arm1 to x-axis <22.5> speed <75>;
			turn arm2 to x-axis <-60> speed <180>;
			sleep 293;
			move arm1 to z-axis [0] speed [1.541095];
			turn base to x-axis <2> speed <13>;
			turn arm1 to x-axis <0> speed <60>;
			turn arm2 to x-axis <0> speed <120>;
			sleep 292;
			turn base to x-axis <0> speed <6>;
			sleep 293;
			move arm1 to z-axis [0] speed [2];
			turn arm1 to x-axis <0> speed <90>;
			turn arm2 to x-axis <0> speed <90>;
			move launcher to z-axis [0] speed [4];
			sleep 200;
		}
		Busy_6 = 0;
	}
}

Create()
{
	gun_1 = 0;
	State_2 = 0;
	hit_4 = 0;
	Request_5 = 0;
	Busy_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
	}
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 10000;
	set-signal-mask 0;
	Request_5 = 0;
	start-script RequestState();
}

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		count = 0;
		if( depth_3 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <25>;
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	depth_3 = Func_Var_1;
}

AimPrimary(heading, pitch)
{
	while( !State_2 )
	{
		Request_5 = 1;
		start-script RequestState();
		sleep 300;	
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	gun_1 = !gun_1;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( depth_3 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode lmispoint type BITMAPONLY | BITMAP1;
			explode rmispoint type BITMAPONLY | BITMAP2;
			explode base type BITMAPONLY | BITMAP3;
			explode arm1 type BITMAPONLY | BITMAP4;
			explode arm2 type BITMAPONLY | BITMAP5;
			explode launcher type BITMAPONLY | BITMAP1;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lmispoint type FALL | BITMAP1;
		explode rmispoint type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode arm1 type FALL | BITMAP4;
		explode arm2 type FALL | BITMAP5;
		explode launcher type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode launcher type BITMAPONLY | EXPLODE_ON_HIT | BITMAP1;
}
