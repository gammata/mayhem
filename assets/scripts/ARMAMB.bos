#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, door1, door2, door3, door4, stand, turret, barrel,
       flare, gun, spot;

static-var  busy_1, state_2, request_3, restore_4, delay_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	set-signal-mask 0;
	while( TRUE )
	{
		while( request_3 != state_2 )
		{
			busy_1 = 1;
			if( request_3 AND !state_2 )
			{
				state_2 = 1;
				dont-cache barrel;
				dont-cache door1;
				dont-cache door2;
				dont-cache door3;
				dont-cache door4;
				dont-cache flare;
				dont-cache gun;
				dont-cache stand;
				dont-cache turret;
				move door1 to y-axis [-3.4] speed [13.6];
				move door2 to y-axis [-3.4] speed [13.6];
				move door3 to y-axis [-3.4] speed [13.6];
				move door4 to y-axis [-3.4] speed [13.6];
				turn door1 to x-axis <0> speed <280>;
				turn door2 to z-axis <0> speed <280>;
				turn door3 to x-axis <0> speed <280>;
				turn door4 to z-axis <0> speed <280>;
				sleep 250;
				set ARMORED to 0;
				move stand to y-axis [-1.5] speed [9];
				turn stand to y-axis <-180.3> speed <401>;
				sleep 450;
				move stand to y-axis [0] speed [3];
				turn stand to y-axis <0> speed <360>;
				move turret to y-axis [0] speed [42];
				sleep 500;
				turn gun to x-axis <0> speed <270>;
				sleep 100;
				move barrel to z-axis [0] speed [32];
				sleep 250;
			}
			if( !request_3 AND state_2 )
			{
				state_2 = 0;
				move barrel to z-axis [-7.9] speed [32];
				sleep 250;
				turn gun to x-axis <-90> speed <300>;
				sleep 250;
				move turret to y-axis [-14.35] speed [44.7];
				sleep 200;
				move stand to y-axis [-1.5] speed [3];
				turn stand to y-axis <-180.3> speed <401>;
				sleep 450;
				turn stand to y-axis <0> speed <360>;
				move door1 to y-axis [0] speed [12];
				move door2 to y-axis [0] speed [12];
				move door3 to y-axis [0] speed [12];
				move door4 to y-axis [0] speed [12];
				sleep 100;
				move stand to y-axis [-5.35] speed [13.5];
				sleep 400;
				turn door1 to x-axis <90.38> speed <280>;
				turn door2 to z-axis <-90.38> speed <280>;
				turn door3 to x-axis <-90.38> speed <280>;
				turn door4 to z-axis <90.38> speed <280>;
				set ARMORED to 1;
				sleep 330;
				cache barrel;
				cache door1;
				cache door2;
				cache door3;
				cache door4;
				cache flare;
				cache gun;
				cache stand;
				cache turret;
			}
		}
		busy_1 = 0;
		if( state_2 AND restore_4 )
		{
			--restore_4;
		}
		sleep 200;
		if( request_3 AND !restore_4 )
		{
			set ACTIVATION to 0;
		}
	}
	return (0);
}

Create()
{
	dont-shade barrel;
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade flare;
	dont-shade gun;
	dont-shade stand;
	dont-shade turret;
	dont-cache flare;
	hide flare;
	busy_1 = 0;
	state_2 = 1;
	request_3 = 0;
	delay_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	restore_4 = 50;
	start-script SmokeUnit();
	start-script RequestState();
	return (0);
}

Deactivate()
{
	signal 2;
	request_3 = 0;
	return (0);
}

Activate()
{
	request_3 = 1;
	if( !restore_4 < 30 )
	{
		restore_4 = 50;
	}
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	while( !state_2 OR busy_1 )
	{
		if( !request_3 ) 
		{
			set ACTIVATION to 1;
		}
		sleep 250;
	}
	turn turret to y-axis heading speed <100>;
	turn gun to x-axis <0> - pitch speed <40>;
	while( delay_5 )
	{
		wait-for-move barrel along z-axis;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	restore_4 = 40;
	return (1);
}

FirePrimary()
{
	delay_5 = 1;
	move barrel to z-axis [-4.8] speed [500];
	show flare;
	sleep 200;
	hide flare;
	move barrel to z-axis [0] speed [1.6];
	wait-for-move barrel along z-axis;
	delay_5 = 0;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = spot;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		if( state_2 )
		{
			corpsetype = 1;
		}
		if( !state_2 )
		{
			corpsetype = 2;
		}
		explode base type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode door3 type BITMAPONLY | BITMAP5;
		explode door4 type BITMAPONLY | BITMAP1;
		explode stand type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		explode barrel type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP4;
		explode door3 type FALL | BITMAP5;
		explode door4 type FALL | BITMAP1;
		explode stand type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		explode barrel type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode stand type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 4;
	explode base type BITMAPONLY | BITMAP1;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode stand type BITMAPONLY | BITMAP2;
	explode turret type BITMAPONLY | BITMAP3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
