#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, cab, LWing, RWing, wake1, wake2, nanopoint;

static-var  sfx_1, moving; 

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	moving=0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

StartMoving()
{
	if( !moving )
	{
		moving=1;
		while (moving)
		{
			if( sfx_1 == 3 )
			{
				emit-sfx 256 | 3 from base;
				emit-sfx 256 | 3 from LWing;
				emit-sfx 256 | 3 from RWing;
				emit-sfx 256 | 3 from wake1;
				emit-sfx 256 | 3 from wake2;
			}
			sleep 150;
		}
	}
	return (0);
}

StopMoving()
{
	moving=0;
}

Activate()
{
	move LWing to x-axis [-4.8] speed [4.82];
	move RWing to x-axis [4.8] speed [4.82];
	return (0);
}

Deactivate()
{
	move LWing to x-axis [0] speed [5.83];
	move RWing to x-axis [0] speed [5.83];
	return (0);
}

StartBuilding(sleeptime)
{
	sleeptime = Rand(1,500);
	sleep sleeptime;
	set INBUILDSTANCE to 1;
	return (0);
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = nanopoint;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide wake1;
	hide wake2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode LWing type BITMAPONLY | BITMAP2;
		explode RWing type BITMAPONLY | BITMAP3;
		explode nanopoint type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode LWing type BITMAPONLY | BITMAP2;
		explode RWing type BITMAPONLY | BITMAP3;
		explode nanopoint type FALL | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode LWing type BITMAPONLY | BITMAP2;
		explode RWing type BITMAPONLY | BITMAP3;
		explode nanopoint type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode LWing type BITMAPONLY | BITMAP2;
	explode RWing type BITMAPONLY | BITMAP3;
	explode nanopoint type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	sfx_1 = Func_Var_1;
	return (0);
}
