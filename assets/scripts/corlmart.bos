#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, arms, sleeve, barrel, flare, turret;

static-var  hit_1;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(AngleX, AngleZ)
{
	if( hit_1 )
	{
		return (0);
	}
	hit_1 = 1;
	turn base to z-axis AngleZ speed <105>;
	turn base to x-axis AngleX speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	sleep 180;
	hit_1 = 0;
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50>;
	turn base to z-axis anglez speed <50>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <20>;
	turn base to x-axis <0> speed <20>;
}

Create()
{
	hit_1 = 0;
	hide flare;
	dont-cache flare;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 4000;
	turn turret to y-axis <0> speed <70>;
	turn sleeve to y-axis <0> speed <70>;
	turn sleeve to x-axis <0> speed <60>;
	wait-for-turn arms around y-axis;
	wait-for-turn sleeve around y-axis;
	wait-for-turn sleeve around x-axis;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <80>;
	turn sleeve to x-axis <0> - pitch speed <30>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	move barrel to z-axis [-2.5] speed [500];
	turn arms to y-axis <-50.005495> speed <500>;
	turn sleeve to y-axis <50.005495> speed <500>;
	sleep 100;
	hide flare;
	move barrel to z-axis [0] speed [1.5];
	turn arms to y-axis <0> speed <23>;
	turn sleeve to y-axis <0> speed <23>;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = arms;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;;
		explode arms type BITMAPONLY | BITMAP3;
		explode sleeve type SHATTER | BITMAP3;
		explode barrel type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode arms type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode arms type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
